{
    "version": "https://jsonfeed.org/version/1",
    "title": "ClaRn'S BLOG • All posts by \"操作系统\" tag",
    "description": "当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素",
    "home_page_url": "https://iyiyiyiyi.github.io",
    "items": [
        {
            "id": "https://iyiyiyiyi.github.io/post/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98.html",
            "url": "https://iyiyiyiyi.github.io/post/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98.html",
            "title": "进程同步经典问题",
            "date_published": "2023-03-25T13:53:16.000Z",
            "content_html": "<h2 id=\"信号量\"><a class=\"markdownIt-Anchor\" href=\"#信号量\"></a> 信号量</h2>\n<p>信号量机制是一种用于解决互斥和同步问题的机制，包括两个原语<code>wait(S)</code>和<code>signal(S)</code>，也可以记为<code>P操作</code>和<code>V操作</code>。</p>\n<h2 id=\"管程\"><a class=\"markdownIt-Anchor\" href=\"#管程\"></a> 管程</h2>\n<p>使用一个数据结构S来描述共享资源数，并包含对该数据结构的一组操作。</p>\n<h2 id=\"生产者-消费者问题\"><a class=\"markdownIt-Anchor\" href=\"#生产者-消费者问题\"></a> 生产者-消费者问题</h2>\n<pre class=\"highlight\"><code class=\"cpp\">semaphore mutex = <span class=\"hljs-number\">1</span>;\nsemaphore empty = n;\nsemaphore full = <span class=\"hljs-number\">0</span>;\nproducer () &#123;\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>) &#123;\n        <span class=\"hljs-comment\">// ...produce data</span>\n        P(empty);\n        P(mutex);\n        <span class=\"hljs-comment\">// ...add data to buffer</span>\n        V(mutex);\n        V(full);\n    &#125;\n&#125;\n\nconsumer() &#123;\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>) &#123;\n        P(full);\n        P(mutex);\n        <span class=\"hljs-comment\">// ...get data from buffer</span>\n        V(mutex);\n        V(empty);\n        <span class=\"hljs-comment\">// ...consume data</span>\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"读者-写者问题\"><a class=\"markdownIt-Anchor\" href=\"#读者-写者问题\"></a> 读者-写者问题</h2>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 读者数量</span>\nsemaphore mutex=<span class=\"hljs-number\">1</span>;\nsemaphore rw=<span class=\"hljs-number\">1</span>;\nsemaphore w=<span class=\"hljs-number\">1</span>; \n<span class=\"hljs-comment\">// w是用来保证写优先的</span>\n<span class=\"hljs-comment\">// 如果没有将会导师读优先，写进程会存在“饿死”现象 </span>\n\nwriter() &#123;\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>) &#123;\n        P(w);\n        P(rw);\n        <span class=\"hljs-comment\">// ...writing</span>\n        V(rw);\n        V(w);\n    &#125;\n&#125;\n\nreader() &#123;\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>) &#123;\n        P(w);\n        P(mutex);\n        <span class=\"hljs-keyword\">if</span> (count == <span class=\"hljs-number\">0</span>)\n            P(rw);\n        count ++;\n        V(mutex);\n        V(w);\n        <span class=\"hljs-comment\">// ...reading</span>\n        P(mutex);\n        count --;\n        <span class=\"hljs-keyword\">if</span> (count == <span class=\"hljs-number\">0</span>)\n            V(rw);\n        V(mutex);\n    &#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "Review",
                "操作系统"
            ]
        },
        {
            "id": "https://iyiyiyiyi.github.io/post/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86.html",
            "url": "https://iyiyiyiyi.github.io/post/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86.html",
            "title": "进程管理",
            "date_published": "2022-04-24T12:42:46.000Z",
            "content_html": "<h2 id=\"进程\"><a class=\"markdownIt-Anchor\" href=\"#进程\"></a> 进程</h2>\n<h3 id=\"进程的概念和特征\"><a class=\"markdownIt-Anchor\" href=\"#进程的概念和特征\"></a> 进程的概念和特征</h3>\n<h4 id=\"进程的概念\"><a class=\"markdownIt-Anchor\" href=\"#进程的概念\"></a> 进程的概念</h4>\n<p>从不同的角度看，进程可以有不同的定义，比较典型的是：</p>\n<ol>\n<li>进程是程序的一次执行过程</li>\n<li>进程是一个程序及其数据在处理机上顺序执行时所发生的活动</li>\n<li>进程是具有独立功能的程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。</li>\n</ol>\n<h4 id=\"进程的特征\"><a class=\"markdownIt-Anchor\" href=\"#进程的特征\"></a> 进程的特征</h4>\n<ol>\n<li>动态性：进程是程序的一次执行，它有创建、活动、暂停、终止的过程，具有一定的生命周期。</li>\n<li>并发性：指多个进程实体同时存在于内存中，能在同一段时间内运行。</li>\n<li>独立性：进程实体是一个能独立运行、独立获取资源和独立接受调度的基本单位。</li>\n<li>异步性：由于进程的制约，使得进程的执行具有间断性，即进程按照各自独立、不可预知的速度往前推进。</li>\n<li>结构性：每个进程都配置一个PCB对其进行描述。从结构上看，进程实体是由程序段、数据段和进程控制块构成的。</li>\n</ol>\n<h4 id=\"进程的状态\"><a class=\"markdownIt-Anchor\" href=\"#进程的状态\"></a> 进程的状态</h4>\n<ol>\n<li>运行态：进程正在处理机上运行</li>\n<li>就绪态：进程获得了除了处理机之外的一切资源，一旦得到处理机就可以立即执行。</li>\n<li>阻塞态：进程因为某一事件而暂停，比如等待输入输出或者某外设资源。</li>\n<li>创建态：进程正在被创建，尚未转到就绪态。</li>\n<li>结束态：进程执行完毕正在从系统中消失。</li>\n</ol>\n<h4 id=\"进程切换过程\"><a class=\"markdownIt-Anchor\" href=\"#进程切换过程\"></a> 进程切换过程</h4>\n<ol>\n<li>保存处理机上下文</li>\n<li>更新PCB信息</li>\n<li>把进程的PCB移入相应的队列，如就绪、阻塞队列</li>\n<li>选择另一个进程执行</li>\n<li>更新内存管理的数据结构</li>\n<li>恢复处理机上下文</li>\n</ol>\n<h4 id=\"进程控制块\"><a class=\"markdownIt-Anchor\" href=\"#进程控制块\"></a> 进程控制块</h4>\n<p>进程控制块用于描述一个进程，其中主要包括描述信息、进程控制和管理信息、资源分配清单和处理机相关信息等。处理机对进程的调度是基于进程控制块实现的。</p>\n<h3 id=\"进程间通信\"><a class=\"markdownIt-Anchor\" href=\"#进程间通信\"></a> 进程间通信</h3>\n<h4 id=\"共享存储\"><a class=\"markdownIt-Anchor\" href=\"#共享存储\"></a> 共享存储</h4>\n<p>这是最简单的一种进程间通信的方式，它为两个进程提供了一片公共的内存区域，在这个内存区域中的读写对于进程双方都是可见的。低级的共享存储是对数据结构的共享，而高级的共享存储是对存储区的共享。</p>\n<h4 id=\"消息传递\"><a class=\"markdownIt-Anchor\" href=\"#消息传递\"></a> 消息传递</h4>\n<p>进程间的数据交换以格式化的消息为单位。包括直接通信方式和间接通信方式。</p>\n<h5 id=\"直接通信方式\"><a class=\"markdownIt-Anchor\" href=\"#直接通信方式\"></a> 直接通信方式</h5>\n<p>发送进程直接将消息发送给接收进程，并且将它挂在接收进程的消息缓冲队列上。接收进程从消息缓冲队列中取得消息。</p>\n<h5 id=\"间接通信方式\"><a class=\"markdownIt-Anchor\" href=\"#间接通信方式\"></a> 间接通信方式</h5>\n<p>发送进程把消息发送给某个中间实体，接收进程从中间实体去的消息，一般又称为信箱通信方式。Android的Binder通信机制类似这种。</p>\n<h4 id=\"管道通信\"><a class=\"markdownIt-Anchor\" href=\"#管道通信\"></a> 管道通信</h4>\n<p>管道通信实际上是消息传递的一种特殊方式。管道实际上是指的用于连接读进程和写进程之间的一个共享文件，又叫做pipe文件。由于管道通信是基于文件的，该文件实际充当了一个缓冲区的作用，所以管道通信只能实现半双工通信。</p>\n<p>从管道中读取数据也是一次性操作，数据在读取之后就会被抛弃。在Linux中一个管道文件被限制在4KB，一旦管道文件已满，IO操作将被阻塞。</p>\n<h3 id=\"多线程\"><a class=\"markdownIt-Anchor\" href=\"#多线程\"></a> 多线程</h3>\n<p>线程是进程内部的一部分，可以理解为更轻量化的进程。在一个进程内可以拥有多个进程，这些进程拥有自己的专有寄存器和栈空间，但是共享进程内的堆空间。</p>\n<p>进程是机器分配资源的基本单位，线程是机器分配CPU的基本单位。协程是线程内部的更轻量化的线程，除了拥有专有寄存器外，协程之间还共享栈空间。</p>\n<p>线程又分为用户级线程和内核级线程；用户级线程依赖应用程序完成线程的调度和管理，内核级线程中的调度和管理都通过操作系统完成。</p>\n<h2 id=\"处理机调度\"><a class=\"markdownIt-Anchor\" href=\"#处理机调度\"></a> 处理机调度</h2>\n<h3 id=\"调度层次\"><a class=\"markdownIt-Anchor\" href=\"#调度层次\"></a> 调度层次</h3>\n<ol>\n<li>作业调度：又称<code>高级调度</code>，主要任务是按照一定的规则从外存中处于后备状态的作业中挑选一个或多个作业，给它们分配内存、输入输出设备等必要的资源，并简历相应的进程。</li>\n<li>内存调度：又称<code>中级调度</code>，主要任务是提高内存利用率和吞吐率。中级调度将决定将那些陷入阻塞状态的进程暂时调入外存，并在处理机以及资源空闲之后将进程调入内存。</li>\n<li>进程调度：又称<code>低级调度</code>，主要任务是按照某种方法和策略将进程从就绪队列中取出，并分配处理机。</li>\n</ol>\n<h3 id=\"进程调度\"><a class=\"markdownIt-Anchor\" href=\"#进程调度\"></a> 进程调度</h3>\n<p>通常有两种进程调度方式：</p>\n<ul>\n<li>非剥夺调度方式：如果有更重要的任务进入就绪队列，将会持续执行当前任务直到结束或者发生阻塞。</li>\n<li>剥夺调度方式：如果有更重要的任务进入就绪队列，处理机将会被强制剥夺。</li>\n</ul>\n<p>不同的调度算法对于不同方面的特性不同。其中的性能指标是评价调度算法是否适合当前场景的重要参数，常用性能指标有如下几种：</p>\n<ol>\n<li>CPU利用率：好的调度算法应该尽可能让CPU利用率高。</li>\n<li>系统吞吐量：表示单位时间内CPU完成作业的数量。长作业需要消耗较长的处理机时间，因此会降低系统的吞吐量。而对于短作业，它们所需要的处理机时间较短，因此能提高系统的吞吐量。</li>\n<li>周转时间：周转时间是指从作业提交到作业完成所经历的时间，是作业等待、在就绪队列中排队、在处理机上运行以及进行输入输出所花费时间的总和。<br />\n作业的周转时间可以用如下公式表示：<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">周</mi><mi mathvariant=\"normal\">转</mi><mi mathvariant=\"normal\">时</mi><mi mathvariant=\"normal\">间</mi><mo>=</mo><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">业</mi><mi mathvariant=\"normal\">完</mi><mi mathvariant=\"normal\">成</mi><mi mathvariant=\"normal\">时</mi><mi mathvariant=\"normal\">间</mi><mo>−</mo><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">业</mi><mi mathvariant=\"normal\">提</mi><mi mathvariant=\"normal\">交</mi><mi mathvariant=\"normal\">时</mi><mi mathvariant=\"normal\">间</mi></mrow><annotation encoding=\"application/x-tex\">周转时间 = 作业完成时间 - 作业提交时间\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">周</span><span class=\"mord cjk_fallback\">转</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">业</span><span class=\"mord cjk_fallback\">完</span><span class=\"mord cjk_fallback\">成</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">业</span><span class=\"mord cjk_fallback\">提</span><span class=\"mord cjk_fallback\">交</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span></span></span></span></span></p>\n平均周转时间是指多个作业周转时间的平均值：<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">平</mi><mi mathvariant=\"normal\">均</mi><mi mathvariant=\"normal\">周</mi><mi mathvariant=\"normal\">转</mi><mi mathvariant=\"normal\">时</mi><mi mathvariant=\"normal\">间</mi><mo>=</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">业</mi><mn>1</mn><mi mathvariant=\"normal\">的</mi><mi mathvariant=\"normal\">周</mi><mi mathvariant=\"normal\">转</mi><mi mathvariant=\"normal\">时</mi><mi mathvariant=\"normal\">间</mi><mo>+</mo><mo separator=\"true\">⋅</mo><mo separator=\"true\">⋅</mo><mo separator=\"true\">⋅</mo><mo>+</mo><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">业</mi><mi>n</mi><mi mathvariant=\"normal\">的</mi><mi mathvariant=\"normal\">中</mi><mi mathvariant=\"normal\">转</mi><mi mathvariant=\"normal\">时</mi><mi mathvariant=\"normal\">间</mi><mo stretchy=\"false\">)</mo></mrow><mi>n</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">平均周转时间 = \\frac{(作业1的周转时间 + ··· + 作业n的中转时间)}{n}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">平</span><span class=\"mord cjk_fallback\">均</span><span class=\"mord cjk_fallback\">周</span><span class=\"mord cjk_fallback\">转</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">业</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">周</span><span class=\"mord cjk_fallback\">转</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord\">+</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">业</span><span class=\"mord mathdefault\">n</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">转</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n带权周转时间是指作业周转时间与作业实际运行时间的比值<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">带</mi><mi mathvariant=\"normal\">权</mi><mi mathvariant=\"normal\">周</mi><mi mathvariant=\"normal\">转</mi><mi mathvariant=\"normal\">时</mi><mi mathvariant=\"normal\">间</mi><mo>=</mo><mfrac><mrow><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">业</mi><mi mathvariant=\"normal\">周</mi><mi mathvariant=\"normal\">转</mi><mi mathvariant=\"normal\">时</mi><mi mathvariant=\"normal\">间</mi></mrow><mrow><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">业</mi><mi mathvariant=\"normal\">实</mi><mi mathvariant=\"normal\">际</mi><mi mathvariant=\"normal\">运</mi><mi mathvariant=\"normal\">行</mi><mi mathvariant=\"normal\">时</mi><mi mathvariant=\"normal\">间</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">带权周转时间= \\frac{作业周转时间}{作业实际运行时间} \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">带</span><span class=\"mord cjk_fallback\">权</span><span class=\"mord cjk_fallback\">周</span><span class=\"mord cjk_fallback\">转</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.363em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.677em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">业</span><span class=\"mord cjk_fallback\">实</span><span class=\"mord cjk_fallback\">际</span><span class=\"mord cjk_fallback\">运</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">业</span><span class=\"mord cjk_fallback\">周</span><span class=\"mord cjk_fallback\">转</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n平均带权周转时间是指多个作业带权周转时间的平均值：<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">平</mi><mi mathvariant=\"normal\">均</mi><mi mathvariant=\"normal\">带</mi><mi mathvariant=\"normal\">权</mi><mi mathvariant=\"normal\">周</mi><mi mathvariant=\"normal\">转</mi><mi mathvariant=\"normal\">时</mi><mi mathvariant=\"normal\">间</mi><mo>=</mo><mfrac><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">业</mi><mn>1</mn><mi mathvariant=\"normal\">的</mi><mi mathvariant=\"normal\">带</mi><mi mathvariant=\"normal\">权</mi><mi mathvariant=\"normal\">周</mi><mi mathvariant=\"normal\">转</mi><mi mathvariant=\"normal\">时</mi><mi mathvariant=\"normal\">间</mi><mo>+</mo><mo separator=\"true\">⋅</mo><mo separator=\"true\">⋅</mo><mo separator=\"true\">⋅</mo><mo>+</mo><mi mathvariant=\"normal\">作</mi><mi mathvariant=\"normal\">业</mi><mi>n</mi><mi mathvariant=\"normal\">的</mi><mi mathvariant=\"normal\">带</mi><mi mathvariant=\"normal\">权</mi><mi mathvariant=\"normal\">周</mi><mi mathvariant=\"normal\">转</mi><mi mathvariant=\"normal\">时</mi><mi mathvariant=\"normal\">间</mi><mo stretchy=\"false\">)</mo></mrow><mi>n</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">平均带权周转时间=\\frac{(作业1的带权周转时间+···+作业n的带权周转时间)}{n}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">平</span><span class=\"mord cjk_fallback\">均</span><span class=\"mord cjk_fallback\">带</span><span class=\"mord cjk_fallback\">权</span><span class=\"mord cjk_fallback\">周</span><span class=\"mord cjk_fallback\">转</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">业</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">带</span><span class=\"mord cjk_fallback\">权</span><span class=\"mord cjk_fallback\">周</span><span class=\"mord cjk_fallback\">转</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord\">+</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">业</span><span class=\"mord mathdefault\">n</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">带</span><span class=\"mord cjk_fallback\">权</span><span class=\"mord cjk_fallback\">周</span><span class=\"mord cjk_fallback\">转</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n</li>\n<li>等待时间：指进程处于等处理机状态的时间之和，等待时间越长，用户满意度越低。</li>\n<li>响应时间：指从用户提交请求到系统首次响应所用的时间。</li>\n</ol>\n<h3 id=\"调度算法\"><a class=\"markdownIt-Anchor\" href=\"#调度算法\"></a> 调度算法</h3>\n<h4 id=\"先来先服务fcfs\"><a class=\"markdownIt-Anchor\" href=\"#先来先服务fcfs\"></a> 先来先服务(FCFS)</h4>\n<p>每次从就绪队列中选择最先进入的进程，直到完成或者阻塞。这种算法属于不可剥夺算法，从表面上看对所有进程都是公平的，但是会导致来的晚的短作业等待时间长。</p>\n<h4 id=\"短作业优先sjf\"><a class=\"markdownIt-Anchor\" href=\"#短作业优先sjf\"></a> 短作业优先(SJF)</h4>\n<p>短作业优先算法从就绪队列中选择一个或若干个估计运行时间最短的作业。该算法会产生<strong>饥饿现象</strong>，使得长作业长期得不到执行。同时该算法也不考虑作业的优先级，因此不会保证重要任务被优先执行。</p>\n<p>该算法对作业的选择严重依赖于估计出的运行时间，但估计运行时间并不准确，因此实际运行过程中该算法可能并不能够做到短作业优先。</p>\n<h4 id=\"优先级调度\"><a class=\"markdownIt-Anchor\" href=\"#优先级调度\"></a> 优先级调度</h4>\n<p>优先级调度算法从就绪队列中选择优先级最高的一个或几个作业。该算法可分为非剥夺优先级调度算法和剥夺式优先级调度算法。</p>\n<p>根据进程创建后优先级是否可变又可以分为静态优先级和动态优先级。</p>\n<h4 id=\"高响应比优先算法\"><a class=\"markdownIt-Anchor\" href=\"#高响应比优先算法\"></a> 高响应比优先算法</h4>\n<p>高响应比优先算法主要用于作业调度，是对FCFS和SJF的一种综合平衡。响应比可以描述为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">响</mi><mi mathvariant=\"normal\">应</mi><mi mathvariant=\"normal\">比</mi><mo>=</mo><mfrac><mrow><mi mathvariant=\"normal\">等</mi><mi mathvariant=\"normal\">待</mi><mi mathvariant=\"normal\">时</mi><mi mathvariant=\"normal\">间</mi><mo>+</mo><mi mathvariant=\"normal\">要</mi><mi mathvariant=\"normal\">求</mi><mi mathvariant=\"normal\">服</mi><mi mathvariant=\"normal\">务</mi><mi mathvariant=\"normal\">时</mi><mi mathvariant=\"normal\">间</mi></mrow><mrow><mi mathvariant=\"normal\">要</mi><mi mathvariant=\"normal\">求</mi><mi mathvariant=\"normal\">服</mi><mi mathvariant=\"normal\">务</mi><mi mathvariant=\"normal\">时</mi><mi mathvariant=\"normal\">间</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">响应比 = \\frac{等待时间+要求服务时间}{要求服务时间}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">响</span><span class=\"mord cjk_fallback\">应</span><span class=\"mord cjk_fallback\">比</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1473309999999999em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.802331em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">要</span><span class=\"mord cjk_fallback mtight\">求</span><span class=\"mord cjk_fallback mtight\">服</span><span class=\"mord cjk_fallback mtight\">务</span><span class=\"mord cjk_fallback mtight\">时</span><span class=\"mord cjk_fallback mtight\">间</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">等</span><span class=\"mord cjk_fallback mtight\">待</span><span class=\"mord cjk_fallback mtight\">时</span><span class=\"mord cjk_fallback mtight\">间</span><span class=\"mbin mtight\">+</span><span class=\"mord cjk_fallback mtight\">要</span><span class=\"mord cjk_fallback mtight\">求</span><span class=\"mord cjk_fallback mtight\">服</span><span class=\"mord cjk_fallback mtight\">务</span><span class=\"mord cjk_fallback mtight\">时</span><span class=\"mord cjk_fallback mtight\">间</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 。对于短作业而言，其要求服务时间短，响应比就越高，可以优先调度；对于长作业而言，等待时间越长，响应比就越高，最终也可以获得处理机资源从而避免了饥饿现象。</p>\n<h4 id=\"时间片轮转算法\"><a class=\"markdownIt-Anchor\" href=\"#时间片轮转算法\"></a> 时间片轮转算法</h4>\n<p>时间片轮转算法将进程按FCFS顺序分配时间片，进程在执行完一个时间片后将重新回到队列末尾。</p>\n<p>时间片大小需要由系统的响应时间、就绪队列中的进程数目以及系统的处理能力确定。</p>\n<h4 id=\"多级反馈队列算法\"><a class=\"markdownIt-Anchor\" href=\"#多级反馈队列算法\"></a> 多级反馈队列算法</h4>\n<p>多级反馈队列算法设置了多个就绪队列，每个就绪队列的优先级不同。根据不同优先级队列划分不同长度的时间片，优先级越低，时间片越大。当优先级高的队列中为空时，CPU将被分配给下一级队列中的进程。</p>\n<p>进程在进入内存后，首先进入最高一级的就绪队列中等待执行，若一个时间片后还没有执行完成，将会被放置进入次优先级的就绪队列中。</p>\n<p>若执行过程中有更高优先级的进程加入，CPU将被高优先级的进程抢占。</p>\n<h3 id=\"进程同步\"><a class=\"markdownIt-Anchor\" href=\"#进程同步\"></a> 进程同步</h3>\n<p>由于进程的异步性导致的进程之间推进速度不可预测，当多个进程需要协同或竞争使用某一资源时，不可避免地需要等待或通知其它进程。这种在同一时刻仅允许一个进程使用的资源又被称为<strong>临界资源</strong>，在进程中访问临界资源的代码块被称为<strong>临界区</strong>。</p>\n<p>同步和互斥是进程之间的制约关系。同步是<strong>直接制约关系</strong>，是指进程之间需要依靠某种顺序执行而必须建立的制约关系，比如生产者消费者；互斥是<strong>间接制约关系</strong>，是指多个进程之间对于某类资源的争用，比如打印机的使用。</p>\n<h3 id=\"临界区互斥方法\"><a class=\"markdownIt-Anchor\" href=\"#临界区互斥方法\"></a> 临界区互斥方法</h3>\n<h4 id=\"软件实现的方法\"><a class=\"markdownIt-Anchor\" href=\"#软件实现的方法\"></a> 软件实现的方法</h4>\n<h5 id=\"单标志法\"><a class=\"markdownIt-Anchor\" href=\"#单标志法\"></a> 单标志法</h5>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-comment\">// P0进程</span>\n<span class=\"hljs-keyword\">while</span>(turn != <span class=\"hljs-number\">0</span>);\ncritical section; <span class=\"hljs-comment\">// 临界区</span>\nturn = <span class=\"hljs-number\">1</span>;\nremainder section; <span class=\"hljs-comment\">// 剩余区</span>\n\n<span class=\"hljs-comment\">// P1进程</span>\n<span class=\"hljs-keyword\">while</span>(turn != <span class=\"hljs-number\">1</span>);\ncritical section;\nturn = <span class=\"hljs-number\">0</span>;\nremainder section\n</code></pre>\n<p>该算法的两个进程必须交替进入临界区，否则若一个进程停止执行，另一个进程会陷入死等。</p>\n<h4 id=\"双标志法先检查\"><a class=\"markdownIt-Anchor\" href=\"#双标志法先检查\"></a> 双标志法先检查</h4>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-comment\">// Pi进程</span>\n<span class=\"hljs-keyword\">while</span>(flag[j]);\nflag[i] = <span class=\"hljs-literal\">true</span>;\ncritical section;\nflag[i] = <span class=\"hljs-literal\">false</span>;\nremainder section;\n\n<span class=\"hljs-comment\">// Pj进程</span>\n<span class=\"hljs-keyword\">while</span>(flag[i]);\nflag[j] = <span class=\"hljs-literal\">true</span>;\ncritical section;\nflag[j] = <span class=\"hljs-literal\">false</span>;\nremainder section\n</code></pre>\n<p>当进程并发执行时，若遇到同时先后执行while语句时，将会导致互斥失效。</p>\n<h4 id=\"双标志法后检查\"><a class=\"markdownIt-Anchor\" href=\"#双标志法后检查\"></a> 双标志法后检查</h4>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-comment\">// Pi进程</span>\nflag[i] = <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-keyword\">while</span>(flag[j]);\ncritical section;\nflag[i] = <span class=\"hljs-literal\">false</span>;\nremainder section;\n\n<span class=\"hljs-comment\">// Pj进程</span>\nflag[j] = <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-keyword\">while</span>(flag[i]);\ncritical section;\nflag[j] = <span class=\"hljs-literal\">false</span>;\nremainder section\n</code></pre>\n<p>当进程并发执行时，若遇到同时先后执行while语句时，将会导致饥饿现象。</p>\n<h4 id=\"petersons-algorithm\"><a class=\"markdownIt-Anchor\" href=\"#petersons-algorithm\"></a> Peterson’s Algorithm</h4>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-comment\">// Pi进程</span>\nflag[i] = <span class=\"hljs-literal\">true</span>;\nturn = j;\n<span class=\"hljs-keyword\">while</span>(flag[j]&amp;&amp;turn==j);\ncritical section;\nflag[i] = <span class=\"hljs-literal\">false</span>;\nremainder section;\n\n<span class=\"hljs-comment\">// Pj进程</span>\nflag[j] = <span class=\"hljs-literal\">true</span>;\nturn = i;\n<span class=\"hljs-keyword\">while</span>(flag[i]&amp;&amp;turn==i);\ncritical section;\nflag[j] = <span class=\"hljs-literal\">false</span>;\nremainder section\n</code></pre>\n",
            "tags": [
                "Review",
                "操作系统"
            ]
        },
        {
            "id": "https://iyiyiyiyi.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0.html",
            "url": "https://iyiyiyiyi.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0.html",
            "title": "操作系统概述",
            "date_published": "2022-04-08T14:11:31.000Z",
            "content_html": "<h2 id=\"操作系统的特征\"><a class=\"markdownIt-Anchor\" href=\"#操作系统的特征\"></a> 操作系统的特征</h2>\n<ol>\n<li>并发：指两个或多个事件在同一时间间隔内发生。</li>\n<li>共享：资源共享，指系统中的资源可供内存中多个并发执行的进程共同使用。\n<ol>\n<li>互斥型共享：资源在同一时刻只允许一个进程使用</li>\n<li>同时访问共享：资源可以在同一时刻由多个进程访问</li>\n</ol>\n</li>\n<li>虚拟：指吧一个物理上的实体编程若干个逻辑上的对应物</li>\n<li>异步：进程的执行以不可预知的速度推进，在不同的时刻仅有一个进程占有处理机。</li>\n</ol>\n<h2 id=\"操作系统的目标和功能\"><a class=\"markdownIt-Anchor\" href=\"#操作系统的目标和功能\"></a> 操作系统的目标和功能</h2>\n<p>操作系统的主要功能有：</p>\n<ul>\n<li>处理机管理</li>\n<li>存储器管理</li>\n<li>设备管理</li>\n<li>文件管理<br />\n操作系统对用户提供命令接口，让用户可以方便、快捷地操作计算机。接口有：</li>\n<li>命令接口：可分为联机命令接口和脱机命令接口\n<ul>\n<li>联机命令接口：交互式命令接口，即Shell</li>\n<li>脱机命令接口：批处理命令接口，即批处理脚本</li>\n</ul>\n</li>\n<li>程序接口：由一组系统调用组成</li>\n</ul>\n<h2 id=\"操作系统地发展和分类\"><a class=\"markdownIt-Anchor\" href=\"#操作系统地发展和分类\"></a> 操作系统地发展和分类</h2>\n<h3 id=\"手工处理阶段\"><a class=\"markdownIt-Anchor\" href=\"#手工处理阶段\"></a> 手工处理阶段</h3>\n<p>此时没有真正意义上的操作系统，所有硬件都由用户自行管理。</p>\n<h3 id=\"批处理阶段\"><a class=\"markdownIt-Anchor\" href=\"#批处理阶段\"></a> 批处理阶段</h3>\n<p>批处理系统可分为单道批处理系统和多道批处理系统。</p>\n<h4 id=\"单道批处理系统\"><a class=\"markdownIt-Anchor\" href=\"#单道批处理系统\"></a> 单道批处理系统</h4>\n<p>系统对作业的处理是成批进行的，但内存中始终只保存一道作业。每当程序在进行IO操作时，CPU将会进行等待。</p>\n<h4 id=\"多道批处理系统\"><a class=\"markdownIt-Anchor\" href=\"#多道批处理系统\"></a> 多道批处理系统</h4>\n<p>内存中不再只保存一道作业，而是可以允许多个程序同时进入内存，并在当前程序因为IO操作等原因陷入阻塞时，CPU将会转而执行其它程序。</p>\n<h3 id=\"分时操作系统\"><a class=\"markdownIt-Anchor\" href=\"#分时操作系统\"></a> 分时操作系统</h3>\n<p>分时技术指将处理器的运行时间分为很短的时间片，按照时间片将处理器分配给各个作业使用。<br />\n分时操作系统则是使用了分时技术，让多个用户可以通过终端共享同一台主机，由于计算机切换进程的时间极短，每个用户都能获得接近独占机器的体验。</p>\n<h3 id=\"实时操作系统\"><a class=\"markdownIt-Anchor\" href=\"#实时操作系统\"></a> 实时操作系统</h3>\n<p>适合需要快速响应作业的场景，可以分为硬实时系统和软实时系统。<br />\n硬实时系统将会绝对地在规定时间内执行任务，软实时系统可以偶尔违反时间规定。</p>\n<h2 id=\"操作系统的运行环境\"><a class=\"markdownIt-Anchor\" href=\"#操作系统的运行环境\"></a> 操作系统的运行环境</h2>\n<h3 id=\"操作系统的运行机制\"><a class=\"markdownIt-Anchor\" href=\"#操作系统的运行机制\"></a> 操作系统的运行机制</h3>\n<h4 id=\"时钟管理\"><a class=\"markdownIt-Anchor\" href=\"#时钟管理\"></a> 时钟管理</h4>\n<p>操作系统通过时钟管理向用户提供标准的系统时间，同时通过时钟中断完成进程的切换。</p>\n<h4 id=\"中断机制\"><a class=\"markdownIt-Anchor\" href=\"#中断机制\"></a> 中断机制</h4>\n<p>系统内核中用于管理设备、事件、调度等操作的机制。</p>\n<h4 id=\"原语\"><a class=\"markdownIt-Anchor\" href=\"#原语\"></a> 原语</h4>\n<ul>\n<li>是操作系统中完成一个规定操作的小程序</li>\n<li>处于操作系统的最底层，是最接近硬件的部分</li>\n<li>程序的运行具有原子性，也就是说其执行不能被打断</li>\n<li>程序的运行时间短，且调用频繁</li>\n</ul>\n<h4 id=\"系统控制的数据结构及处理\"><a class=\"markdownIt-Anchor\" href=\"#系统控制的数据结构及处理\"></a> 系统控制的数据结构及处理</h4>\n<ol>\n<li>进程管理，使用进程控制块(PCB)</li>\n<li>存储器管理</li>\n<li>设备管理</li>\n</ol>\n<h3 id=\"中断和异常\"><a class=\"markdownIt-Anchor\" href=\"#中断和异常\"></a> 中断和异常</h3>\n<h4 id=\"中断\"><a class=\"markdownIt-Anchor\" href=\"#中断\"></a> 中断</h4>\n<p>中断又称外中断，指来自CPU之外的事件的发生，如设备发出的IO中断或时钟发出的时钟中断。</p>\n<h4 id=\"异常\"><a class=\"markdownIt-Anchor\" href=\"#异常\"></a> 异常</h4>\n<p>异常也称内中断、例外或者陷入(trap)，指CPU内部发生的如程序非法操作、地址越界、算术溢出、虚存系统缺页以及陷入指令所引发的事件。异常无法被屏蔽，且处理异常依赖于当前运行程序。GBD的Debug就是依赖trap指令实现的调试功能。</p>\n<h4 id=\"中断处理的过程\"><a class=\"markdownIt-Anchor\" href=\"#中断处理的过程\"></a> 中断处理的过程</h4>\n<ol>\n<li>关中断</li>\n<li>保存断点</li>\n<li>中断服务程序寻址</li>\n<li>保护现场和屏蔽字</li>\n<li>开中断</li>\n<li>执行中断服务程序</li>\n<li>关中断</li>\n<li>恢复现场和屏蔽字</li>\n<li>开中断、中断返回</li>\n</ol>\n<h3 id=\"系统调用\"><a class=\"markdownIt-Anchor\" href=\"#系统调用\"></a> 系统调用</h3>\n<p>系统调用的发生需要操作系统完成从用户态到内核态的转换，同时系统调用的函数使用的堆栈也将从用户堆栈切换到系统堆栈。<br />\n用户可以通过trap指令来发起系统调用，trap指令又称为陷入指令或访管指令。访管指令是在用户态执行的，所以并非是特权指令。</p>\n",
            "tags": [
                "Review",
                "操作系统"
            ]
        }
    ]
}