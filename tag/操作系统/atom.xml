<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://iyiyiyiyi.github.io</id>
    <title>ClaRn&#39;S BLOG • Posts by &#34;操作系统&#34; tag</title>
    <link href="https://iyiyiyiyi.github.io" />
    <updated>2023-03-25T13:53:16.000Z</updated>
    <category term="压缩算法" />
    <category term="Android" />
    <category term="作业" />
    <category term="模式识别" />
    <category term="机器学习" />
    <category term="生物信息学" />
    <category term="算法" />
    <category term="动态规划" />
    <category term="图像处理" />
    <category term="OpenCV" />
    <category term="操作系统" />
    <category term="Review" />
    <category term="数据库" />
    <category term="编译原理" />
    <category term="软件工程" />
    <category term="数据结构" />
    <category term="人工智能" />
    <entry>
        <id>https://iyiyiyiyi.github.io/post/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98.html</id>
        <title>进程同步经典问题</title>
        <link rel="alternate" href="https://iyiyiyiyi.github.io/post/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98.html"/>
        <content type="html">&lt;h2 id=&#34;信号量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#信号量&#34;&gt;&lt;/a&gt; 信号量&lt;/h2&gt;
&lt;p&gt;信号量机制是一种用于解决互斥和同步问题的机制，包括两个原语&lt;code&gt;wait(S)&lt;/code&gt;和&lt;code&gt;signal(S)&lt;/code&gt;，也可以记为&lt;code&gt;P操作&lt;/code&gt;和&lt;code&gt;V操作&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;管程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#管程&#34;&gt;&lt;/a&gt; 管程&lt;/h2&gt;
&lt;p&gt;使用一个数据结构S来描述共享资源数，并包含对该数据结构的一组操作。&lt;/p&gt;
&lt;h2 id=&#34;生产者-消费者问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生产者-消费者问题&#34;&gt;&lt;/a&gt; 生产者-消费者问题&lt;/h2&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;cpp&#34;&gt;semaphore mutex = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;
semaphore empty = n;
semaphore full = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;
producer () &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &amp;#123;
        &lt;span class=&#34;hljs-comment&#34;&gt;// ...produce data&lt;/span&gt;
        P(empty);
        P(mutex);
        &lt;span class=&#34;hljs-comment&#34;&gt;// ...add data to buffer&lt;/span&gt;
        V(mutex);
        V(full);
    &amp;#125;
&amp;#125;

consumer() &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &amp;#123;
        P(full);
        P(mutex);
        &lt;span class=&#34;hljs-comment&#34;&gt;// ...get data from buffer&lt;/span&gt;
        V(mutex);
        V(empty);
        &lt;span class=&#34;hljs-comment&#34;&gt;// ...consume data&lt;/span&gt;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;读者-写者问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#读者-写者问题&#34;&gt;&lt;/a&gt; 读者-写者问题&lt;/h2&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;cpp&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;int&lt;/span&gt; count = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// 读者数量&lt;/span&gt;
semaphore mutex=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;
semaphore rw=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;
semaphore w=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;; 
&lt;span class=&#34;hljs-comment&#34;&gt;// w是用来保证写优先的&lt;/span&gt;
&lt;span class=&#34;hljs-comment&#34;&gt;// 如果没有将会导师读优先，写进程会存在“饿死”现象 &lt;/span&gt;

writer() &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &amp;#123;
        P(w);
        P(rw);
        &lt;span class=&#34;hljs-comment&#34;&gt;// ...writing&lt;/span&gt;
        V(rw);
        V(w);
    &amp;#125;
&amp;#125;

reader() &amp;#123;
    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &amp;#123;
        P(w);
        P(mutex);
        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (count == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)
            P(rw);
        count ++;
        V(mutex);
        V(w);
        &lt;span class=&#34;hljs-comment&#34;&gt;// ...reading&lt;/span&gt;
        P(mutex);
        count --;
        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (count == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)
            V(rw);
        V(mutex);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="操作系统" />
        <category term="Review" />
        <updated>2023-03-25T13:53:16.000Z</updated>
    </entry>
    <entry>
        <id>https://iyiyiyiyi.github.io/post/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86.html</id>
        <title>进程管理</title>
        <link rel="alternate" href="https://iyiyiyiyi.github.io/post/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86.html"/>
        <content type="html">&lt;h2 id=&#34;进程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程&#34;&gt;&lt;/a&gt; 进程&lt;/h2&gt;
&lt;h3 id=&#34;进程的概念和特征&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程的概念和特征&#34;&gt;&lt;/a&gt; 进程的概念和特征&lt;/h3&gt;
&lt;h4 id=&#34;进程的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程的概念&#34;&gt;&lt;/a&gt; 进程的概念&lt;/h4&gt;
&lt;p&gt;从不同的角度看，进程可以有不同的定义，比较典型的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程是程序的一次执行过程&lt;/li&gt;
&lt;li&gt;进程是一个程序及其数据在处理机上顺序执行时所发生的活动&lt;/li&gt;
&lt;li&gt;进程是具有独立功能的程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;进程的特征&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程的特征&#34;&gt;&lt;/a&gt; 进程的特征&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;动态性：进程是程序的一次执行，它有创建、活动、暂停、终止的过程，具有一定的生命周期。&lt;/li&gt;
&lt;li&gt;并发性：指多个进程实体同时存在于内存中，能在同一段时间内运行。&lt;/li&gt;
&lt;li&gt;独立性：进程实体是一个能独立运行、独立获取资源和独立接受调度的基本单位。&lt;/li&gt;
&lt;li&gt;异步性：由于进程的制约，使得进程的执行具有间断性，即进程按照各自独立、不可预知的速度往前推进。&lt;/li&gt;
&lt;li&gt;结构性：每个进程都配置一个PCB对其进行描述。从结构上看，进程实体是由程序段、数据段和进程控制块构成的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;进程的状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程的状态&#34;&gt;&lt;/a&gt; 进程的状态&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;运行态：进程正在处理机上运行&lt;/li&gt;
&lt;li&gt;就绪态：进程获得了除了处理机之外的一切资源，一旦得到处理机就可以立即执行。&lt;/li&gt;
&lt;li&gt;阻塞态：进程因为某一事件而暂停，比如等待输入输出或者某外设资源。&lt;/li&gt;
&lt;li&gt;创建态：进程正在被创建，尚未转到就绪态。&lt;/li&gt;
&lt;li&gt;结束态：进程执行完毕正在从系统中消失。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;进程切换过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程切换过程&#34;&gt;&lt;/a&gt; 进程切换过程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;保存处理机上下文&lt;/li&gt;
&lt;li&gt;更新PCB信息&lt;/li&gt;
&lt;li&gt;把进程的PCB移入相应的队列，如就绪、阻塞队列&lt;/li&gt;
&lt;li&gt;选择另一个进程执行&lt;/li&gt;
&lt;li&gt;更新内存管理的数据结构&lt;/li&gt;
&lt;li&gt;恢复处理机上下文&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;进程控制块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程控制块&#34;&gt;&lt;/a&gt; 进程控制块&lt;/h4&gt;
&lt;p&gt;进程控制块用于描述一个进程，其中主要包括描述信息、进程控制和管理信息、资源分配清单和处理机相关信息等。处理机对进程的调度是基于进程控制块实现的。&lt;/p&gt;
&lt;h3 id=&#34;进程间通信&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程间通信&#34;&gt;&lt;/a&gt; 进程间通信&lt;/h3&gt;
&lt;h4 id=&#34;共享存储&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#共享存储&#34;&gt;&lt;/a&gt; 共享存储&lt;/h4&gt;
&lt;p&gt;这是最简单的一种进程间通信的方式，它为两个进程提供了一片公共的内存区域，在这个内存区域中的读写对于进程双方都是可见的。低级的共享存储是对数据结构的共享，而高级的共享存储是对存储区的共享。&lt;/p&gt;
&lt;h4 id=&#34;消息传递&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息传递&#34;&gt;&lt;/a&gt; 消息传递&lt;/h4&gt;
&lt;p&gt;进程间的数据交换以格式化的消息为单位。包括直接通信方式和间接通信方式。&lt;/p&gt;
&lt;h5 id=&#34;直接通信方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#直接通信方式&#34;&gt;&lt;/a&gt; 直接通信方式&lt;/h5&gt;
&lt;p&gt;发送进程直接将消息发送给接收进程，并且将它挂在接收进程的消息缓冲队列上。接收进程从消息缓冲队列中取得消息。&lt;/p&gt;
&lt;h5 id=&#34;间接通信方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#间接通信方式&#34;&gt;&lt;/a&gt; 间接通信方式&lt;/h5&gt;
&lt;p&gt;发送进程把消息发送给某个中间实体，接收进程从中间实体去的消息，一般又称为信箱通信方式。Android的Binder通信机制类似这种。&lt;/p&gt;
&lt;h4 id=&#34;管道通信&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#管道通信&#34;&gt;&lt;/a&gt; 管道通信&lt;/h4&gt;
&lt;p&gt;管道通信实际上是消息传递的一种特殊方式。管道实际上是指的用于连接读进程和写进程之间的一个共享文件，又叫做pipe文件。由于管道通信是基于文件的，该文件实际充当了一个缓冲区的作用，所以管道通信只能实现半双工通信。&lt;/p&gt;
&lt;p&gt;从管道中读取数据也是一次性操作，数据在读取之后就会被抛弃。在Linux中一个管道文件被限制在4KB，一旦管道文件已满，IO操作将被阻塞。&lt;/p&gt;
&lt;h3 id=&#34;多线程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多线程&#34;&gt;&lt;/a&gt; 多线程&lt;/h3&gt;
&lt;p&gt;线程是进程内部的一部分，可以理解为更轻量化的进程。在一个进程内可以拥有多个进程，这些进程拥有自己的专有寄存器和栈空间，但是共享进程内的堆空间。&lt;/p&gt;
&lt;p&gt;进程是机器分配资源的基本单位，线程是机器分配CPU的基本单位。协程是线程内部的更轻量化的线程，除了拥有专有寄存器外，协程之间还共享栈空间。&lt;/p&gt;
&lt;p&gt;线程又分为用户级线程和内核级线程；用户级线程依赖应用程序完成线程的调度和管理，内核级线程中的调度和管理都通过操作系统完成。&lt;/p&gt;
&lt;h2 id=&#34;处理机调度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#处理机调度&#34;&gt;&lt;/a&gt; 处理机调度&lt;/h2&gt;
&lt;h3 id=&#34;调度层次&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#调度层次&#34;&gt;&lt;/a&gt; 调度层次&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;作业调度：又称&lt;code&gt;高级调度&lt;/code&gt;，主要任务是按照一定的规则从外存中处于后备状态的作业中挑选一个或多个作业，给它们分配内存、输入输出设备等必要的资源，并简历相应的进程。&lt;/li&gt;
&lt;li&gt;内存调度：又称&lt;code&gt;中级调度&lt;/code&gt;，主要任务是提高内存利用率和吞吐率。中级调度将决定将那些陷入阻塞状态的进程暂时调入外存，并在处理机以及资源空闲之后将进程调入内存。&lt;/li&gt;
&lt;li&gt;进程调度：又称&lt;code&gt;低级调度&lt;/code&gt;，主要任务是按照某种方法和策略将进程从就绪队列中取出，并分配处理机。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;进程调度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程调度&#34;&gt;&lt;/a&gt; 进程调度&lt;/h3&gt;
&lt;p&gt;通常有两种进程调度方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非剥夺调度方式：如果有更重要的任务进入就绪队列，将会持续执行当前任务直到结束或者发生阻塞。&lt;/li&gt;
&lt;li&gt;剥夺调度方式：如果有更重要的任务进入就绪队列，处理机将会被强制剥夺。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同的调度算法对于不同方面的特性不同。其中的性能指标是评价调度算法是否适合当前场景的重要参数，常用性能指标有如下几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU利用率：好的调度算法应该尽可能让CPU利用率高。&lt;/li&gt;
&lt;li&gt;系统吞吐量：表示单位时间内CPU完成作业的数量。长作业需要消耗较长的处理机时间，因此会降低系统的吞吐量。而对于短作业，它们所需要的处理机时间较短，因此能提高系统的吞吐量。&lt;/li&gt;
&lt;li&gt;周转时间：周转时间是指从作业提交到作业完成所经历的时间，是作业等待、在就绪队列中排队、在处理机上运行以及进行输入输出所花费时间的总和。&lt;br /&gt;
作业的周转时间可以用如下公式表示：&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;周&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;转&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;时&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;间&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;作&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;业&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;完&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;成&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;时&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;间&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;作&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;业&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;提&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;交&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;时&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;间&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;周转时间 = 作业完成时间 - 作业提交时间
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;周&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;转&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;间&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.66666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;作&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;业&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;完&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;成&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;间&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;作&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;业&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;提&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;交&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;间&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
平均周转时间是指多个作业周转时间的平均值：&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;平&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;均&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;周&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;转&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;时&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;间&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;作&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;业&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;的&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;周&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;转&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;时&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;间&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mo separator=&#34;true&#34;&gt;⋅&lt;/mo&gt;&lt;mo separator=&#34;true&#34;&gt;⋅&lt;/mo&gt;&lt;mo separator=&#34;true&#34;&gt;⋅&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;作&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;业&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;的&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;中&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;转&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;时&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;间&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;平均周转时间 = \frac{(作业1的周转时间 + ··· + 作业n的中转时间)}{n}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;平&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;均&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;周&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;转&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;间&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.113em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.427em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathdefault&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;作&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;业&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;周&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;转&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;间&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;⋅&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;⋅&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;⋅&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;作&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;业&lt;/span&gt;&lt;span class=&#34;mord mathdefault&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;中&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;转&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;间&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
带权周转时间是指作业周转时间与作业实际运行时间的比值&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;带&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;权&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;周&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;转&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;时&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;间&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;作&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;业&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;周&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;转&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;时&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;间&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;作&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;业&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;实&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;际&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;运&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;行&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;时&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;间&lt;/mi&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;带权周转时间= \frac{作业周转时间}{作业实际运行时间} 
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;带&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;权&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;周&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;转&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;间&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.363em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.677em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;作&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;业&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;实&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;际&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;运&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;行&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;间&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;作&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;业&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;周&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;转&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;间&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
平均带权周转时间是指多个作业带权周转时间的平均值：&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;平&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;均&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;带&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;权&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;周&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;转&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;时&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;间&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;作&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;业&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;的&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;带&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;权&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;周&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;转&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;时&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;间&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mo separator=&#34;true&#34;&gt;⋅&lt;/mo&gt;&lt;mo separator=&#34;true&#34;&gt;⋅&lt;/mo&gt;&lt;mo separator=&#34;true&#34;&gt;⋅&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;作&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;业&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;的&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;带&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;权&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;周&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;转&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;时&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;间&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;平均带权周转时间=\frac{(作业1的带权周转时间+···+作业n的带权周转时间)}{n}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;平&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;均&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;带&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;权&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;周&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;转&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;间&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.113em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.427em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathdefault&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;作&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;业&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;带&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;权&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;周&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;转&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;间&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;⋅&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;⋅&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;⋅&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;作&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;业&lt;/span&gt;&lt;span class=&#34;mord mathdefault&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;带&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;权&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;周&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;转&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;间&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;等待时间：指进程处于等处理机状态的时间之和，等待时间越长，用户满意度越低。&lt;/li&gt;
&lt;li&gt;响应时间：指从用户提交请求到系统首次响应所用的时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;调度算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#调度算法&#34;&gt;&lt;/a&gt; 调度算法&lt;/h3&gt;
&lt;h4 id=&#34;先来先服务fcfs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#先来先服务fcfs&#34;&gt;&lt;/a&gt; 先来先服务(FCFS)&lt;/h4&gt;
&lt;p&gt;每次从就绪队列中选择最先进入的进程，直到完成或者阻塞。这种算法属于不可剥夺算法，从表面上看对所有进程都是公平的，但是会导致来的晚的短作业等待时间长。&lt;/p&gt;
&lt;h4 id=&#34;短作业优先sjf&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#短作业优先sjf&#34;&gt;&lt;/a&gt; 短作业优先(SJF)&lt;/h4&gt;
&lt;p&gt;短作业优先算法从就绪队列中选择一个或若干个估计运行时间最短的作业。该算法会产生&lt;strong&gt;饥饿现象&lt;/strong&gt;，使得长作业长期得不到执行。同时该算法也不考虑作业的优先级，因此不会保证重要任务被优先执行。&lt;/p&gt;
&lt;p&gt;该算法对作业的选择严重依赖于估计出的运行时间，但估计运行时间并不准确，因此实际运行过程中该算法可能并不能够做到短作业优先。&lt;/p&gt;
&lt;h4 id=&#34;优先级调度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优先级调度&#34;&gt;&lt;/a&gt; 优先级调度&lt;/h4&gt;
&lt;p&gt;优先级调度算法从就绪队列中选择优先级最高的一个或几个作业。该算法可分为非剥夺优先级调度算法和剥夺式优先级调度算法。&lt;/p&gt;
&lt;p&gt;根据进程创建后优先级是否可变又可以分为静态优先级和动态优先级。&lt;/p&gt;
&lt;h4 id=&#34;高响应比优先算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#高响应比优先算法&#34;&gt;&lt;/a&gt; 高响应比优先算法&lt;/h4&gt;
&lt;p&gt;高响应比优先算法主要用于作业调度，是对FCFS和SJF的一种综合平衡。响应比可以描述为 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;响&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;应&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;比&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;等&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;待&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;时&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;间&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;要&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;求&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;服&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;务&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;时&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;间&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;要&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;求&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;服&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;务&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;时&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;间&lt;/mi&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;响应比 = \frac{等待时间+要求服务时间}{要求服务时间}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;响&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;应&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;比&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.1473309999999999em;vertical-align:-0.345em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.802331em;&#34;&gt;&lt;span style=&#34;top:-2.6550000000000002em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;要&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;求&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;服&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;务&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;间&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;等&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;待&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;间&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;要&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;求&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;服&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;务&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback mtight&#34;&gt;间&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.345em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 。对于短作业而言，其要求服务时间短，响应比就越高，可以优先调度；对于长作业而言，等待时间越长，响应比就越高，最终也可以获得处理机资源从而避免了饥饿现象。&lt;/p&gt;
&lt;h4 id=&#34;时间片轮转算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#时间片轮转算法&#34;&gt;&lt;/a&gt; 时间片轮转算法&lt;/h4&gt;
&lt;p&gt;时间片轮转算法将进程按FCFS顺序分配时间片，进程在执行完一个时间片后将重新回到队列末尾。&lt;/p&gt;
&lt;p&gt;时间片大小需要由系统的响应时间、就绪队列中的进程数目以及系统的处理能力确定。&lt;/p&gt;
&lt;h4 id=&#34;多级反馈队列算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多级反馈队列算法&#34;&gt;&lt;/a&gt; 多级反馈队列算法&lt;/h4&gt;
&lt;p&gt;多级反馈队列算法设置了多个就绪队列，每个就绪队列的优先级不同。根据不同优先级队列划分不同长度的时间片，优先级越低，时间片越大。当优先级高的队列中为空时，CPU将被分配给下一级队列中的进程。&lt;/p&gt;
&lt;p&gt;进程在进入内存后，首先进入最高一级的就绪队列中等待执行，若一个时间片后还没有执行完成，将会被放置进入次优先级的就绪队列中。&lt;/p&gt;
&lt;p&gt;若执行过程中有更高优先级的进程加入，CPU将被高优先级的进程抢占。&lt;/p&gt;
&lt;h3 id=&#34;进程同步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程同步&#34;&gt;&lt;/a&gt; 进程同步&lt;/h3&gt;
&lt;p&gt;由于进程的异步性导致的进程之间推进速度不可预测，当多个进程需要协同或竞争使用某一资源时，不可避免地需要等待或通知其它进程。这种在同一时刻仅允许一个进程使用的资源又被称为&lt;strong&gt;临界资源&lt;/strong&gt;，在进程中访问临界资源的代码块被称为&lt;strong&gt;临界区&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同步和互斥是进程之间的制约关系。同步是&lt;strong&gt;直接制约关系&lt;/strong&gt;，是指进程之间需要依靠某种顺序执行而必须建立的制约关系，比如生产者消费者；互斥是&lt;strong&gt;间接制约关系&lt;/strong&gt;，是指多个进程之间对于某类资源的争用，比如打印机的使用。&lt;/p&gt;
&lt;h3 id=&#34;临界区互斥方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#临界区互斥方法&#34;&gt;&lt;/a&gt; 临界区互斥方法&lt;/h3&gt;
&lt;h4 id=&#34;软件实现的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#软件实现的方法&#34;&gt;&lt;/a&gt; 软件实现的方法&lt;/h4&gt;
&lt;h5 id=&#34;单标志法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单标志法&#34;&gt;&lt;/a&gt; 单标志法&lt;/h5&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;cpp&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// P0进程&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(turn != &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);
critical section; &lt;span class=&#34;hljs-comment&#34;&gt;// 临界区&lt;/span&gt;
turn = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;
remainder section; &lt;span class=&#34;hljs-comment&#34;&gt;// 剩余区&lt;/span&gt;

&lt;span class=&#34;hljs-comment&#34;&gt;// P1进程&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(turn != &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);
critical section;
turn = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;
remainder section
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该算法的两个进程必须交替进入临界区，否则若一个进程停止执行，另一个进程会陷入死等。&lt;/p&gt;
&lt;h4 id=&#34;双标志法先检查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#双标志法先检查&#34;&gt;&lt;/a&gt; 双标志法先检查&lt;/h4&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;cpp&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Pi进程&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(flag[j]);
flag[i] = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;
critical section;
flag[i] = &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;
remainder section;

&lt;span class=&#34;hljs-comment&#34;&gt;// Pj进程&lt;/span&gt;
&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(flag[i]);
flag[j] = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;
critical section;
flag[j] = &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;
remainder section
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当进程并发执行时，若遇到同时先后执行while语句时，将会导致互斥失效。&lt;/p&gt;
&lt;h4 id=&#34;双标志法后检查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#双标志法后检查&#34;&gt;&lt;/a&gt; 双标志法后检查&lt;/h4&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;cpp&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Pi进程&lt;/span&gt;
flag[i] = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;
&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(flag[j]);
critical section;
flag[i] = &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;
remainder section;

&lt;span class=&#34;hljs-comment&#34;&gt;// Pj进程&lt;/span&gt;
flag[j] = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;
&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(flag[i]);
critical section;
flag[j] = &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;
remainder section
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当进程并发执行时，若遇到同时先后执行while语句时，将会导致饥饿现象。&lt;/p&gt;
&lt;h4 id=&#34;petersons-algorithm&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#petersons-algorithm&#34;&gt;&lt;/a&gt; Peterson’s Algorithm&lt;/h4&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;cpp&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Pi进程&lt;/span&gt;
flag[i] = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;
turn = j;
&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(flag[j]&amp;amp;&amp;amp;turn==j);
critical section;
flag[i] = &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;
remainder section;

&lt;span class=&#34;hljs-comment&#34;&gt;// Pj进程&lt;/span&gt;
flag[j] = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;
turn = i;
&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt;(flag[i]&amp;amp;&amp;amp;turn==i);
critical section;
flag[j] = &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;
remainder section
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="操作系统" />
        <category term="Review" />
        <updated>2022-04-24T12:42:46.000Z</updated>
    </entry>
    <entry>
        <id>https://iyiyiyiyi.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0.html</id>
        <title>操作系统概述</title>
        <link rel="alternate" href="https://iyiyiyiyi.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0.html"/>
        <content type="html">&lt;h2 id=&#34;操作系统的特征&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作系统的特征&#34;&gt;&lt;/a&gt; 操作系统的特征&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;并发：指两个或多个事件在同一时间间隔内发生。&lt;/li&gt;
&lt;li&gt;共享：资源共享，指系统中的资源可供内存中多个并发执行的进程共同使用。
&lt;ol&gt;
&lt;li&gt;互斥型共享：资源在同一时刻只允许一个进程使用&lt;/li&gt;
&lt;li&gt;同时访问共享：资源可以在同一时刻由多个进程访问&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;虚拟：指吧一个物理上的实体编程若干个逻辑上的对应物&lt;/li&gt;
&lt;li&gt;异步：进程的执行以不可预知的速度推进，在不同的时刻仅有一个进程占有处理机。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;操作系统的目标和功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作系统的目标和功能&#34;&gt;&lt;/a&gt; 操作系统的目标和功能&lt;/h2&gt;
&lt;p&gt;操作系统的主要功能有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理机管理&lt;/li&gt;
&lt;li&gt;存储器管理&lt;/li&gt;
&lt;li&gt;设备管理&lt;/li&gt;
&lt;li&gt;文件管理&lt;br /&gt;
操作系统对用户提供命令接口，让用户可以方便、快捷地操作计算机。接口有：&lt;/li&gt;
&lt;li&gt;命令接口：可分为联机命令接口和脱机命令接口
&lt;ul&gt;
&lt;li&gt;联机命令接口：交互式命令接口，即Shell&lt;/li&gt;
&lt;li&gt;脱机命令接口：批处理命令接口，即批处理脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;程序接口：由一组系统调用组成&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;操作系统地发展和分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作系统地发展和分类&#34;&gt;&lt;/a&gt; 操作系统地发展和分类&lt;/h2&gt;
&lt;h3 id=&#34;手工处理阶段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#手工处理阶段&#34;&gt;&lt;/a&gt; 手工处理阶段&lt;/h3&gt;
&lt;p&gt;此时没有真正意义上的操作系统，所有硬件都由用户自行管理。&lt;/p&gt;
&lt;h3 id=&#34;批处理阶段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#批处理阶段&#34;&gt;&lt;/a&gt; 批处理阶段&lt;/h3&gt;
&lt;p&gt;批处理系统可分为单道批处理系统和多道批处理系统。&lt;/p&gt;
&lt;h4 id=&#34;单道批处理系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单道批处理系统&#34;&gt;&lt;/a&gt; 单道批处理系统&lt;/h4&gt;
&lt;p&gt;系统对作业的处理是成批进行的，但内存中始终只保存一道作业。每当程序在进行IO操作时，CPU将会进行等待。&lt;/p&gt;
&lt;h4 id=&#34;多道批处理系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多道批处理系统&#34;&gt;&lt;/a&gt; 多道批处理系统&lt;/h4&gt;
&lt;p&gt;内存中不再只保存一道作业，而是可以允许多个程序同时进入内存，并在当前程序因为IO操作等原因陷入阻塞时，CPU将会转而执行其它程序。&lt;/p&gt;
&lt;h3 id=&#34;分时操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分时操作系统&#34;&gt;&lt;/a&gt; 分时操作系统&lt;/h3&gt;
&lt;p&gt;分时技术指将处理器的运行时间分为很短的时间片，按照时间片将处理器分配给各个作业使用。&lt;br /&gt;
分时操作系统则是使用了分时技术，让多个用户可以通过终端共享同一台主机，由于计算机切换进程的时间极短，每个用户都能获得接近独占机器的体验。&lt;/p&gt;
&lt;h3 id=&#34;实时操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实时操作系统&#34;&gt;&lt;/a&gt; 实时操作系统&lt;/h3&gt;
&lt;p&gt;适合需要快速响应作业的场景，可以分为硬实时系统和软实时系统。&lt;br /&gt;
硬实时系统将会绝对地在规定时间内执行任务，软实时系统可以偶尔违反时间规定。&lt;/p&gt;
&lt;h2 id=&#34;操作系统的运行环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作系统的运行环境&#34;&gt;&lt;/a&gt; 操作系统的运行环境&lt;/h2&gt;
&lt;h3 id=&#34;操作系统的运行机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作系统的运行机制&#34;&gt;&lt;/a&gt; 操作系统的运行机制&lt;/h3&gt;
&lt;h4 id=&#34;时钟管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#时钟管理&#34;&gt;&lt;/a&gt; 时钟管理&lt;/h4&gt;
&lt;p&gt;操作系统通过时钟管理向用户提供标准的系统时间，同时通过时钟中断完成进程的切换。&lt;/p&gt;
&lt;h4 id=&#34;中断机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#中断机制&#34;&gt;&lt;/a&gt; 中断机制&lt;/h4&gt;
&lt;p&gt;系统内核中用于管理设备、事件、调度等操作的机制。&lt;/p&gt;
&lt;h4 id=&#34;原语&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原语&#34;&gt;&lt;/a&gt; 原语&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;是操作系统中完成一个规定操作的小程序&lt;/li&gt;
&lt;li&gt;处于操作系统的最底层，是最接近硬件的部分&lt;/li&gt;
&lt;li&gt;程序的运行具有原子性，也就是说其执行不能被打断&lt;/li&gt;
&lt;li&gt;程序的运行时间短，且调用频繁&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;系统控制的数据结构及处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#系统控制的数据结构及处理&#34;&gt;&lt;/a&gt; 系统控制的数据结构及处理&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;进程管理，使用进程控制块(PCB)&lt;/li&gt;
&lt;li&gt;存储器管理&lt;/li&gt;
&lt;li&gt;设备管理&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;中断和异常&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#中断和异常&#34;&gt;&lt;/a&gt; 中断和异常&lt;/h3&gt;
&lt;h4 id=&#34;中断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#中断&#34;&gt;&lt;/a&gt; 中断&lt;/h4&gt;
&lt;p&gt;中断又称外中断，指来自CPU之外的事件的发生，如设备发出的IO中断或时钟发出的时钟中断。&lt;/p&gt;
&lt;h4 id=&#34;异常&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异常&#34;&gt;&lt;/a&gt; 异常&lt;/h4&gt;
&lt;p&gt;异常也称内中断、例外或者陷入(trap)，指CPU内部发生的如程序非法操作、地址越界、算术溢出、虚存系统缺页以及陷入指令所引发的事件。异常无法被屏蔽，且处理异常依赖于当前运行程序。GBD的Debug就是依赖trap指令实现的调试功能。&lt;/p&gt;
&lt;h4 id=&#34;中断处理的过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#中断处理的过程&#34;&gt;&lt;/a&gt; 中断处理的过程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;关中断&lt;/li&gt;
&lt;li&gt;保存断点&lt;/li&gt;
&lt;li&gt;中断服务程序寻址&lt;/li&gt;
&lt;li&gt;保护现场和屏蔽字&lt;/li&gt;
&lt;li&gt;开中断&lt;/li&gt;
&lt;li&gt;执行中断服务程序&lt;/li&gt;
&lt;li&gt;关中断&lt;/li&gt;
&lt;li&gt;恢复现场和屏蔽字&lt;/li&gt;
&lt;li&gt;开中断、中断返回&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;系统调用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#系统调用&#34;&gt;&lt;/a&gt; 系统调用&lt;/h3&gt;
&lt;p&gt;系统调用的发生需要操作系统完成从用户态到内核态的转换，同时系统调用的函数使用的堆栈也将从用户堆栈切换到系统堆栈。&lt;br /&gt;
用户可以通过trap指令来发起系统调用，trap指令又称为陷入指令或访管指令。访管指令是在用户态执行的，所以并非是特权指令。&lt;/p&gt;
</content>
        <category term="操作系统" />
        <category term="Review" />
        <updated>2022-04-08T14:11:31.000Z</updated>
    </entry>
</feed>
