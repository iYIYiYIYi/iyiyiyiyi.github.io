<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://iyiyiyiyi.github.io</id>
    <title>ClaRn&#39;S BLOG • Posts by &#34;软件工程&#34; tag</title>
    <link href="https://iyiyiyiyi.github.io" />
    <updated>2023-03-23T16:41:13.000Z</updated>
    <category term="压缩算法" />
    <category term="Android" />
    <category term="作业" />
    <category term="模式识别" />
    <category term="机器学习" />
    <category term="生物信息学" />
    <category term="算法" />
    <category term="动态规划" />
    <category term="图像处理" />
    <category term="OpenCV" />
    <category term="操作系统" />
    <category term="Review" />
    <category term="数据库" />
    <category term="编译原理" />
    <category term="软件工程" />
    <category term="数据结构" />
    <category term="人工智能" />
    <entry>
        <id>https://iyiyiyiyi.github.io/post/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html</id>
        <title>软件工程中的开发模型</title>
        <link rel="alternate" href="https://iyiyiyiyi.github.io/post/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.html"/>
        <content type="html">&lt;h2 id=&#34;软件开发生命周期software-development-lifecycle-sdlc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#软件开发生命周期software-development-lifecycle-sdlc&#34;&gt;&lt;/a&gt; 软件开发生命周期（software development lifecycle (SDLC) ）&lt;/h2&gt;
&lt;p&gt;软件的产生直到报废的生命周期，包括：问题定义、可行性分析、需求分析、总体设计、详细设计、编码、测试、运行维护等阶段。&lt;/p&gt;
&lt;h2 id=&#34;软件开发模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#软件开发模型&#34;&gt;&lt;/a&gt; 软件开发模型&lt;/h2&gt;
&lt;h3 id=&#34;1-瀑布模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-瀑布模型&#34;&gt;&lt;/a&gt; 1、瀑布模型&lt;/h3&gt;
&lt;p&gt;瀑布模型也称为生命周期发，是结构化方法中最常用的开发模型，可以分为&lt;strong&gt;软件计划、需求分析、软件设计、程序编码、软件测试和运行维护&lt;/strong&gt;几个阶段。适合需求明确或变更少的项目&lt;/p&gt;
&lt;h3 id=&#34;2-增量模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-增量模型&#34;&gt;&lt;/a&gt; 2、增量模型&lt;/h3&gt;
&lt;p&gt;增量模型融合了瀑布模型的基本成分和原型实现的迭代特征，是第三种原型化开发方法，但它不是“抛弃式”的，也不是“渐进式”的。**增量模型把软件产品划分为一系列的增量构件，第一个增量往往是核心的产品，即第一个增量实现了基本的需求。**客户对每一个增量的使用和评估都作为下一个增量发布的新特征和功能，这个过程在每一个增量发布后不断重复，直到产生了最终的完善产品。增量模型与原型实现模型和其他演化方法一样，本质上是迭代的，但与原型实现不一样的是其强调每一个增量均发布一个可操作产品。增量模型将功能细化、分别开发的方法适应于需求经常改变的软件开发过程&lt;/p&gt;
&lt;h3 id=&#34;3-螺旋模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-螺旋模型&#34;&gt;&lt;/a&gt; 3、螺旋模型&lt;/h3&gt;
&lt;p&gt;螺旋模型以原型为基础，每一次螺旋都要&lt;strong&gt;经过制订计划、风险分析、实施工程及客户评价等活动，并开发原型的一个新版本&lt;/strong&gt;，经过若干次螺旋上升的过程得到最终的系统。&lt;/p&gt;
&lt;h3 id=&#34;4-喷泉模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-喷泉模型&#34;&gt;&lt;/a&gt; 4、喷泉模型&lt;/h3&gt;
&lt;p&gt;喷泉模型是一种以用户需求为动力，以对象为驱动地模型，主要用于描述面向对象的软件开发过程，该模型认为软件开发过程自下而上的，各阶段是相互迭代和无间隙的。无间隙是指在开发活动中，分析、设计和编码之间不存在明显的边界。&lt;/p&gt;
&lt;h3 id=&#34;5-v模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-v模型&#34;&gt;&lt;/a&gt; 5、V模型&lt;/h3&gt;
&lt;p&gt;V 形模型也称为 V 模型或验证与验证模型，是瀑布方法的扩展。使用 V 模型时，进度并不会直线移动，而是在实施和开发后逐渐上升。&lt;/p&gt;
&lt;p&gt;对于 V 型 SDLC 项目，&lt;strong&gt;早期测试介入&lt;/strong&gt;是与瀑布模型相比的主要区别。每个开发阶段都有一个并行测试阶段，这有助于在继续下一步之前验证和验证每个步骤。&lt;/p&gt;
&lt;h3 id=&#34;快速原型模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#快速原型模型&#34;&gt;&lt;/a&gt; 快速原型模型&lt;/h3&gt;
&lt;p&gt;快速原型是利用原型辅助软件开发的一种新思想。&lt;/p&gt;
&lt;p&gt;经过简单快速分析，快速建造一个可以运行的软件原型，以便理解和澄清问题，使开发人员与用户达成共识，最终在确定的用户需求基础上开发客户满意的软件产品。&lt;/p&gt;
&lt;p&gt;原型可以为三类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;探索型原型：主要用于需求分析阶段，目的是要弄清用户的需求，并探索各种方案的可行性。它主要针对开发目标模糊，用户与开发人员对项目都缺乏经验的情况，通过对原型的开发来明确用户的需求&lt;/li&gt;
&lt;li&gt;实验型原型：主要用于设计阶段，考核实现方案是否合适，能否实现。对于大型系统，若对设计方案心中没有把握时，可通过这种原型来证实设计方案的正确性&lt;/li&gt;
&lt;li&gt;演化型原型：主要用于及早向用户提交一个原型系统，该原型系统或者包含系统的框架，或者包含系统的主要功能，在得到用户的认可后，将原型系统不断扩充演变为最终的软件系统&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;敏捷模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#敏捷模型&#34;&gt;&lt;/a&gt; 敏捷模型&lt;/h3&gt;
&lt;p&gt;敏捷（Agile） SDLC 模型是迭代和增量方法的组合，致力于通过早期交付工作软件来适应灵活的需求并满足用户和客户的需求。敏捷项目中的需求和解决方案可能会在开发过程中发展。&lt;/p&gt;
&lt;p&gt;通过敏捷开发，该产品被分为小的增量构建，并以迭代方式交付。将所有任务划分为较小的时间范围，以便为每个版本准备工作功能。最终产品版本包含所有必需的功能。敏捷仍然是技术行业中使用最广泛的SDLC。&lt;/p&gt;
&lt;p&gt;常见的敏捷开发方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;极限编程(XP)&lt;/li&gt;
&lt;li&gt;自适应软件开发&lt;/li&gt;
&lt;li&gt;水晶方法&lt;/li&gt;
&lt;li&gt;特性驱动开发&lt;/li&gt;
&lt;li&gt;scrum&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Review" />
        <category term="软件工程" />
        <updated>2023-03-23T16:41:13.000Z</updated>
    </entry>
</feed>
