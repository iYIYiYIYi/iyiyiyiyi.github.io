{
    "version": "https://jsonfeed.org/version/1",
    "title": "ClaRn'S BLOG • All posts by \"数据结构\" tag",
    "description": "当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素",
    "home_page_url": "https://iyiyiyiyi.github.io",
    "items": [
        {
            "id": "https://iyiyiyiyi.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",
            "url": "https://iyiyiyiyi.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",
            "title": "数据结构",
            "date_published": "2022-04-08T14:10:10.000Z",
            "content_html": "<h2 id=\"一-数据结构与算法分析的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#一-数据结构与算法分析的基本概念\"></a> 一、 数据结构与算法分析的基本概念</h2>\n<h3 id=\"一数据结构的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#一数据结构的基本概念\"></a> （一）数据结构的基本概念</h3>\n<ol>\n<li>数据<br />\n数据是信息的载体，是描述客观事物属性的数字、字符以及所有能输入到计算机中被程序识别和处理的符号的集合</li>\n<li>数据元素<br />\n数据元素是数据的基本单位，一个数据元素由若干个 <code>数据项</code> 组成，<strong>数据项是数据元素中不可分割的最小单位</strong>。</li>\n<li>数据对象<br />\n<strong>数据对象是具有相同性质的数据元素的集合</strong>，是数据的一个子集。</li>\n<li>数据类型<br />\n数据类型是一个值的集合和定义在此集合上的一组操作的统称\n<ul>\n<li>原子类型：值不可再分的数据类型</li>\n<li>结构类型：值可以再分解为若干分量的数据类型</li>\n<li>抽象数据类型(ADT) ：抽象数据组织以及相关操作，可以用抽象数据类型定义一个完整的数据结构</li>\n</ul>\n</li>\n<li>数据结构<br />\n数据结构是相互之间存在一种或多种特定关系的数据元素的集合。数据元素之间的关系被称为结构。数据结构包括：<strong>逻辑结构、存储结构、数据运算</strong>。<br />\n数据的逻辑结构和存储结构是密不可分的两个方面，一个算法的设计取决于所选定的逻辑结构，而算法的实现依赖于所采用的存储结构。</li>\n<li>数据结构的三要素\n<ol>\n<li>数据的逻辑结构<br />\n逻辑结构是指数据元素之间的逻辑关系，即从逻辑关系上描述数据。<em><strong>它与数据的存储无关</strong></em>，是独立于计算机的。数据的逻辑结构分为线性结构和非线性结构，线性表就是典型的线性结构；集合、树、图就是典型的非线性结构。\n<ul>\n<li>集合：结构中的数据之间除了“同属于一个集合”之外，没有别的关系</li>\n<li>线性结构：结构中的数据元素之间只存在一对一的关系</li>\n<li>树形结构：结构中的数据元素之间存在一对多的关系</li>\n<li>图或网状结构：结构中的数据元素之间存在多对多的关系</li>\n</ul>\n</li>\n<li>数据的存储结构<br />\n存储结构是指数据结构再计算机中的表示，也称物理结构。它包括数据安苏的表示和关系的表示。数据的存储结构是用计算机语言实现的逻辑结构，它依赖于计算机语言。数据的存储结构主要有顺寻存储、链式存储、索引存储和散列存储\n<ul>\n<li>顺序存储：把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。其优点是可以实现随机存取，每个元素占用最小的存储空间，缺点是只能使用相邻的一整块存储单元，因此可能产生较多外部碎片</li>\n<li>链式存储：不要求逻辑上相邻的元素在物理位置上也相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系。其优点是不会出现碎片现象，能充分利用所有存储单元；缺点是每个元素因存储指针而占用额外的存储空间，且只能实现顺序存取。</li>\n<li>索引存储：在存储元素信息的同时还建立附加的索引表。索引表中的每项称为索引项，索引项的一般形式是(关键字：地址)。其优点是检索速度快，缺点是附加的索引表额外占用存储空间。另外，增加和删除数据时也要修改索引表，因此比较耗时。</li>\n<li>散列存储(哈希存储)：根据元素的关键字直接计算出该元素的存储地址。其优点是减速、增加和删除节点的操作都很快；缺点是如果散列函数不好，则可能出现元素存储单元冲突，解决冲突则需要许多额外的时间和空间开销。</li>\n</ul>\n</li>\n<li>数据的运算<br />\n施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑机构，支出运算的功能；运算的实现是针对存储结构的，指出运算的具体操作步骤。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"二渐近算法分析方法\"><a class=\"markdownIt-Anchor\" href=\"#二渐近算法分析方法\"></a> （二）渐近算法分析方法</h3>\n<ol>\n<li>\n<p>算法的基本概念<br />\n算法是对特定问题求解的一种描述，它是指令的有限序列，其中的每条指令代表一个或多个操作。此外，一个算法还具有下列五个重要特性：</p>\n<ol>\n<li>有穷性：一个算法必须总在执行完有穷步之后结束，且每一步都可再有穷时间内完成。</li>\n<li>确定性：算法中的每条指令必须有确切的含义，对于相同的输入只能得到相同的输出</li>\n<li>可行性：算法中描述的操作的可以通过已有实现的基本运算执行有限次来实现</li>\n<li>输入：输入取自某个特定的对象的集合</li>\n<li>输出：一个算法有一个或多个输出，这些输出是与输入有着某种特定关系的量<br />\n通常一个好的算法应该达到：</li>\n<li>正确性：答案得是对的</li>\n<li>可读性：助于人们理解</li>\n<li>健壮性： 输入非法数据时能作出恰当的反应，没啥bug</li>\n<li>效率与低存储量需求：又快又好地执行</li>\n</ol>\n</li>\n<li>\n<p>算法效率的度量<br />\n算法效率的度量是通过时间复杂度和空间复杂度来描述的</p>\n</li>\n</ol>\n<h3 id=\"三时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#三时间复杂度\"></a> （三）时间复杂度</h3>\n<ol>\n<li>\n<p>时间复杂度<br />\n一个语句的频度是指该语句在算法中被重复执行的次数，算法中所有语句频度之和记为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>，它是该算法问题规模<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>的函数，时间复杂度主要分析<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>的数量级。算法中基本运算(最深层循环内的语句)的频度与<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>同数量级，因此通常采用算法中基本运算的频度<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>(取<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>中增长最快的项，比如<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><msup><mi>n</mi><mn>3</mn></msup><mo>+</mo><mi>b</mi><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>c</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">f(n)=an^3+bn^2+cn</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">n</span></span></span></span>,则取<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>n</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span>)来分析算法的时间复杂度。故算法的时间复杂度记为：$$T(n)=O(f(n))$$。</p>\n<p>算法的时间复杂度不仅取决于问题规模<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>，也取决于待输入数据的性质。</p>\n<p>分析程序的时间复杂性的两条规则：</p>\n<ol>\n<li>加法规则 :<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>T</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msub><mi>T</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)=T_1(n)+T_2(n)=O(f(n))+O(g(n))=O(max(f(n),g(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>乘法规则 :<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>T</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><msub><mi>T</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)=T_1(n)*T_2(n)=O(f(n))*O(g(n))=O(f(n)*g(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span><br />\n常见的渐进时间复杂度有</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mspace linebreak=\"newline\"></mspace><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\\\\nO(1)&lt;O(log_2 n)&lt;O(n)&lt;O(nlog_2 n)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">!</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n</li>\n</ol>\n<h3 id=\"四空间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#四空间复杂度\"></a> （四）空间复杂度</h3>\n<ol>\n<li>\n<p>空间复杂度<br />\n算法的空间复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>定义为该算法所耗费的存储空间，它是问题规模<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>的函数。记为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S(n)=O(g(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> 。</p>\n<p>一个程序在执行时除了需要存储空间来存放本身所用的指令、常数、变量和输入数据之外，还需要一些对数据进行操作的工作单元和存储一些为实现计算所需信息的辅助空间。若输入数据所占空间只取决于问题本身，和算法无关，则只需分析除输入和程序之外的额外空间。</p>\n<p>算法原地工作指算法所需的辅助空间为常量，即<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n</li>\n</ol>\n<hr />\n<h2 id=\"二-线性表-栈和队列\"><a class=\"markdownIt-Anchor\" href=\"#二-线性表-栈和队列\"></a> 二、 线性表、栈和队列</h2>\n<h3 id=\"一线性表的定义和基本操作的设计\"><a class=\"markdownIt-Anchor\" href=\"#一线性表的定义和基本操作的设计\"></a> （一）线性表的定义和基本操作的设计</h3>\n<p>线性表是具有相同数据类型的n个数据元素的有限序列，其中n为表长，当<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>时线性表是一个空表。若用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span></span></span></span>命名线性表，则其表示为：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>4</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>5</mn></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L=(a_1,a_2,a_3,a_4,a_5...,a_i,...,a_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，式中，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mi mathvariant=\"normal\">称</mi><mi mathvariant=\"normal\">为</mi><mi mathvariant=\"normal\">表</mi><mi mathvariant=\"normal\">头</mi><mi mathvariant=\"normal\">元</mi><mi mathvariant=\"normal\">素</mi><mi mathvariant=\"normal\">，</mi></mrow><annotation encoding=\"application/x-tex\">a_1称为表头元素，</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">称</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">头</span><span class=\"mord cjk_fallback\">元</span><span class=\"mord cjk_fallback\">素</span><span class=\"mord cjk_fallback\">，</span></span></span></span>a_n$称为表为元素，除第一个元素外，所有元素都只有一个直接前驱，除最后一个元素外，所有元素都只有一个直接后驱。</p>\n<p>故线性表的特点如下：</p>\n<ul>\n<li>表中元素个数有限</li>\n<li>表中元素具有逻辑上的顺序，元素之间有其先后顺序</li>\n<li>表中元素都是数据元素，每个元素都是单个元素</li>\n<li>表中元素的数据类型都相同，即每个元素占有相同大小的存储空间</li>\n<li>表中元素具有抽象性，即仅讨论元素之间的逻辑关系，而不考虑元素究竟表示什么内容</li>\n</ul>\n<p>线性表的基本操作:</p>\n<ul>\n<li>InitList(&amp;L):初始化</li>\n<li>Length(&amp;L):求表长</li>\n<li>LocateElem(L,e)：按值查找操作。在表L中查找具有给定关键字值的元素</li>\n<li>GetElem(L,i)：按位查找操作。返回表中第i个位置的元素</li>\n<li>ListInsert(&amp;L,i,e)：插入操作。在表L中的第i个位置上插入指定元素e</li>\n<li>ListDelete(&amp;L,i,&amp;e)：删除操作。删除表L中第i个位置的怨怒是，并用e返回删除元素的值</li>\n<li>PrintList(L)：输出操作。按前后顺序输出线性表L的所有元素值</li>\n<li>Empty(L)：判空操作。若L为空表，返回true，否则返回false</li>\n<li>DestroyList(&amp;L)：销毁操作。释放内存空间</li>\n</ul>\n<h3 id=\"二线性表的顺序存储结构和链式存储结构实现\"><a class=\"markdownIt-Anchor\" href=\"#二线性表的顺序存储结构和链式存储结构实现\"></a> （二）线性表的顺序存储结构和链式存储结构实现</h3>\n<h4 id=\"顺序表的定义\"><a class=\"markdownIt-Anchor\" href=\"#顺序表的定义\"></a> 顺序表的定义:</h4>\n<p>线性表的顺序存储又称顺序表。它是用一组地址连续的存储单元一次存储线性表中的数据元素，从而使得逻辑上相邻的两个元素在物理位置上也相邻。第一个元素存储在线性表的起始位置，第i个元素存储在线性表的第i个位置，紧接着便是第i+1个元素，称i为元素<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>在线性表中的位序。因此，<code>顺序表的特点式表中元素的逻辑顺序与其物理顺序相同</code>。</p>\n<p>每个数据元素的存储位置都和线性表的起始位置相差一个和该数据元素的位序成正比的查那个书，因此<code>线性表中的任意数据元素都可以随机存取</code>。通常用高级程序设计语言中的数组来描述线性表的顺序存储结构。</p>\n<pre><code>线性表中的位序是从1开始的，而数组下标式从0开始的\n</code></pre>\n<p>静态分配的线性表的顺序存储类型可以被表述为：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxSize 50         <span class=\"hljs-comment\">//线性表的最大长度</span></span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> &#123;</span>\n    ElemType data[MaxSize];<span class=\"hljs-comment\">//顺序表的元素</span>\n    <span class=\"hljs-keyword\">int</span> length;            <span class=\"hljs-comment\">//顺序表当前的长度</span>\n&#125;SqList                    <span class=\"hljs-comment\">//顺序表的类型定义</span>\n</code></pre>\n<p>动态分配的线性表的顺序存储类型可以被表述为：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> InitSize 50        <span class=\"hljs-comment\">//线性表的初始长度</span></span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> &#123;</span>\n    ElemType *data         <span class=\"hljs-comment\">//顺序表的元素</span>\n    <span class=\"hljs-keyword\">int</span> length;            <span class=\"hljs-comment\">//顺序表当前的长度</span>\n&#125;SqList                    <span class=\"hljs-comment\">//顺序表的类型定义</span>\n</code></pre>\n<p>动态分配的线性表初始化时需要对data进行内存空间分配，分配空间大小可以动态变化，若空间不足，可以额外申请一块更大的连续内存将数据复制过去后，再释放原内存，但前提是系统内存空间足够。</p>\n<p>顺序表最主要的特点是随机访问，访问指定序号的元素的时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>顺序表的存储密度高，每个节点只存储数据元素，没有额外的指针域。</p>\n<h4 id=\"单链表的定义\"><a class=\"markdownIt-Anchor\" href=\"#单链表的定义\"></a> 单链表的定义:</h4>\n<ul>\n<li>\n<p>线性表的链式表示:</p>\n<pre><code>顺序表可以随时存取表彰的任意一个元素，它的存储位置可以用一个简单直观的公式表示，但插入和删除操作需要移动大量元素。链式存储线性表时，不需要使用地址连续的存储单元，即不要求逻辑上相邻的元素在物理位置上也相邻，它通过“链”建立起数据元素之间的逻辑关系，因此插入和删除操作不需要移动怨怒是，而只需要修改指针，但也会失去顺序表可以随机存取的优势。\n</code></pre>\n</li>\n</ul>\n<p>线性表的链式存储又称为单链表，它是指通过一组任意的存储单元来存储线性表中的数据元素。为了建立数据元素之间的线性关系，对每个链表节点，除存放元素自身的信息外，还需要存放一个指向其后继的指针。单链表节点描述为：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span>&#123;</span>\n    ElemType data;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LNode</span> *<span class=\"hljs-title\">next</span>;</span>\n)LNode,*LinkList;\n</code></pre>\n<p>利用单链表可以解决顺序表需要大量连续存储单元的缺点，但单链表附加指针域，也存在浪费空间的缺点。由于节点的离散存储，所以单链表不支持随机存取。</p>\n<p>通常用头指针来标识一个单链表，如单链表L，头指针为NULL时表示一个空表。此外为了操作方便，在第一个存储数据的节点之前附加一个节点，称为头节点，头节点可以存储单链表长度，也可以不存储任何信息。</p>\n<h3 id=\"三线性表的应用\"><a class=\"markdownIt-Anchor\" href=\"#三线性表的应用\"></a> （三）线性表的应用</h3>\n<h3 id=\"四栈和队列的基本概念和基本操作的设计\"><a class=\"markdownIt-Anchor\" href=\"#四栈和队列的基本概念和基本操作的设计\"></a> （四）栈和队列的基本概念和基本操作的设计</h3>\n<h4 id=\"栈\"><a class=\"markdownIt-Anchor\" href=\"#栈\"></a> 栈</h4>\n<ol>\n<li>栈的定义：栈是只允许在一端进行插入或删除操作的线性表</li>\n<li>栈顶：线性表允许进行删除的那一端</li>\n<li>栈底：固定的，不允许进行插入和删除的一端</li>\n<li>空栈：不含任何元素的空表</li>\n<li>栈的数学性质：$n个不同元素进栈，出栈不同排列组合的个数为 \\frac{1}{(n+1)} C^{n}_{2n} $ 。上述公式称为<code>卡特兰数</code>。</li>\n<li>栈的基本操作\n<ol>\n<li>InitStack(&amp;S):初始化</li>\n<li>StackEmpty(S):判断是否为空，若是则返回true，若不是则返回false</li>\n<li>Push(&amp;S,x):进栈，若栈S未满则将x加入使之成为新的栈顶</li>\n<li>Pop(&amp;S,&amp;x):出栈，若栈非空，则弹出栈顶元素，并用x返回</li>\n<li>GetTop(S,&amp;x):读取栈顶元素</li>\n<li>DestroyStack(&amp;S):销毁栈<br />\n若题干未限制，则可以直接使用这些基本操作函数</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"队列\"><a class=\"markdownIt-Anchor\" href=\"#队列\"></a> 队列</h4>\n<ol>\n<li>队列的定义：队列简称队，是一种操作受限制的线性表，只允许在表的一端插入，另一端进行删除。</li>\n<li>入队(进队)：向表中进行数据插入</li>\n<li>出队(离队)：向表中进行数据删除</li>\n<li>队列的基本操作\n<ol>\n<li>InitQueue(&amp;Q):初始化队列</li>\n<li>QueueEmpty(Q):判断是否为空</li>\n<li>EnQueue(&amp;Q,x):入队，若队列Q未满，则将x加入使之成为新的队尾</li>\n<li>DeQueue(&amp;Q,&amp;x):出队，若队列Q非空，删除队头元素，并用x返回。</li>\n<li>GetHead(!,&amp;x):读取队头元素，若队列非空则将队头元素赋值给x</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"五栈和队列的顺序存储结构和链式存储结构实现\"><a class=\"markdownIt-Anchor\" href=\"#五栈和队列的顺序存储结构和链式存储结构实现\"></a> （五）栈和队列的顺序存储结构和链式存储结构实现</h3>\n<h4 id=\"栈的存储结构\"><a class=\"markdownIt-Anchor\" href=\"#栈的存储结构\"></a> 栈的存储结构</h4>\n<ol>\n<li>\n<p>顺序存储结构</p>\n<ol>\n<li>实现<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> Maxsize 50 <span class=\"hljs-comment\">//栈中元素的最大个数</span></span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> &#123;</span>\n   ElemenType data[MaxSize]; <span class=\"hljs-comment\">//存放栈中元素</span>\n   <span class=\"hljs-keyword\">int</span> top; <span class=\"hljs-comment\">//栈顶指针</span>\n&#125; SqStack;\n</code></pre>\n</li>\n<li>栈空条件：top = -1(若栈顶指针指向下一个空闲空间，则top = 0)；栈满条件：top = Maxsize -1; 栈长：top + 1;</li>\n<li>由于顺序栈的入栈操作受到数组上界的约束，当对栈的最大使用空间估计不足时，有可能发生栈上溢。</li>\n</ol>\n</li>\n<li>\n<p>链式存储结构</p>\n<ol>\n<li>实现<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LinkNode</span> &#123;</span>\n   ElemType data;\n   <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LinkNode</span> *<span class=\"hljs-title\">next</span>;</span>\n&#125; *LiStack; <span class=\"hljs-comment\">//相当于LinkNode*</span>\n</code></pre>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"队列的存储结构\"><a class=\"markdownIt-Anchor\" href=\"#队列的存储结构\"></a> 队列的存储结构</h4>\n<ol>\n<li>顺序存储\n<ol>\n<li>实现<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> Maxsize 50</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> &#123;</span>\n   ElemType data[Maxsize];\n   <span class=\"hljs-keyword\">int</span> front,rear;\n&#125; SqQueue;\n</code></pre>\n</li>\n<li>初始状态(队空条件)：front == rear == 0;进队操作：队不满时，先将值送到队尾元素，再将队尾指针加1；出队操作:先将值取出，再将队头指针加1</li>\n<li>普通队列不能用rear == Maxsize 判空，会出现假溢出</li>\n<li>循环队列的队列长度：(rear+Maxsize-front)%Maxsize (rear指向的是下一个空余空间，所以在没有超出Maxsize的情况下实际长度是(rear-front)-1)；循环队列的队首指针：front = (front+1)%Maxsize ；循环队列的队尾指针：rear = (rear+1)%Maxsize</li>\n<li>循环队列判断队满\n<ol>\n<li>牺牲一个单元，规定rear+1 = front ，即尾指针的下一个单元是头指针时为满；此时队满条件为：(rear+1)%Maxsize = front;队空条件仍为：front == rear;队长为：(rear-front+Maxsize)%Maxsize</li>\n<li>类型中新增表示元素个数的数据成员size，表示队满的条件则为size == Maxsize</li>\n<li>类型中新增tag数据成员，以区分是队满还是队空。tag == 0时，若因删除导致front == rear则为队空；tag == 1时，若因插入导致front == rear，则为队满。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"六栈和队列的应用\"><a class=\"markdownIt-Anchor\" href=\"#六栈和队列的应用\"></a> （六）栈和队列的应用</h3>\n<hr />\n<h2 id=\"三-二叉树和树\"><a class=\"markdownIt-Anchor\" href=\"#三-二叉树和树\"></a> 三、 二叉树和树</h2>\n<h3 id=\"一二叉树\"><a class=\"markdownIt-Anchor\" href=\"#一二叉树\"></a> （一）二叉树</h3>\n<ol>\n<li>\n<p>二叉树的定义及其主要特征</p>\n<ol>\n<li>二叉树是另一种树形结构，其特点是每个结点至多只有两颗子树（即二叉树中不存在度大于2的结点），并且二叉树的子树有左右之分，其次序不能随意颠倒。<br />\n与树相似，二叉树也以递归的形式定义。二叉树是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>≥</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n(n \\geq 0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>个结点的有限集合：\n<ol>\n<li>或者为空二叉树，即<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></li>\n<li>或者由一个根节点和两个互不相等的被称为根的左子树和右子树组成。左子树和右子树又分别是一棵二叉树</li>\n</ol>\n</li>\n</ol>\n<p><em><strong>二叉树是有序树</strong></em>，若其左、右子树颠倒，则成为另一颗不同的二叉树，即使树中结点只有一棵子树，也要区分它是左子树还是右子树。</p>\n<ul>\n<li>满二叉树：\n<ul>\n<li>高度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span></span></span></span>且结点数为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^h -1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.932438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">h</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>的二叉树。即树中每层的结点都是满的。</li>\n<li>满二叉树的叶子结点均在最下一层，且除叶子结点外每个节点的度均为2 。</li>\n<li>满二叉树的编号：\n<ul>\n<li>从根节点开始（根节点为1），自上到下，从左到右依次排号。</li>\n<li>若编号为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>的子节点有双亲，则双亲编号为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">向</mi><mi mathvariant=\"normal\">上</mi><mi mathvariant=\"normal\">取</mi><mi mathvariant=\"normal\">整</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">i/2(向上取整)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">向</span><span class=\"mord cjk_fallback\">上</span><span class=\"mord cjk_fallback\">取</span><span class=\"mord cjk_fallback\">整</span><span class=\"mclose\">)</span></span></span></span>，左孩子结点编号为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mo>×</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">2 \\times i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>，右孩子的结点编号为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2i +1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>完全二叉树：\n<ul>\n<li>高度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span></span></span></span>、有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>个结点的二叉树，当且仅当其每个结点都与高度<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span></span></span></span>的满二叉树中编号为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>→</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1 \\to n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>的结点一一对应时称为完全二叉树（人话版：所有节点的序号排列都和满二叉树里的排列一样）</li>\n<li>若<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>≤</mo><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mtext>  </mtext><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">舍</mi><mi mathvariant=\"normal\">去</mi><mi mathvariant=\"normal\">小</mi><mi mathvariant=\"normal\">数</mi><mi mathvariant=\"normal\">取</mi><mi mathvariant=\"normal\">整</mi><mo stretchy=\"false\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">i \\leq {n/2 \\ \\ (舍去小数取整)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.79549em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">舍</span><span class=\"mord cjk_fallback\">去</span><span class=\"mord cjk_fallback\">小</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">取</span><span class=\"mord cjk_fallback\">整</span><span class=\"mclose\">)</span></span></span></span></span>，则有结点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>为分支节点，否则必为叶子结点。因为要一一对应的话，就会和满二叉树类似叶子结点几乎分布于最底层。</li>\n<li>叶子结点只可能在层次最大的两层上出现，最大层次中的叶子结点都依次排列在最左侧的位置上。意即从最底层的最左侧开始分布，一直排列到最右侧，排满了就是满二叉树了嗷。</li>\n<li><strong>若有度为1的结点，则只可能有1个，且该结点只有左孩子。</strong></li>\n<li>按层序编号后，一旦出现某节点为叶子结点或只有左孩子，则编号大于该节点的均为叶子结点（上一条性质为原理）</li>\n<li>若<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>为奇数，则每个分支结点都有左孩子和右孩子，若<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>为偶数，则编号最大的分支结点（编号为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span>）只有左孩子，没有右孩子，其余分支结点左右孩子都有。</li>\n</ul>\n</li>\n<li>二叉排序树：\n<ul>\n<li>左子树上所有结点的关键字均小于根节点的关键字；右子树上所有结点的关键字均大于根节点的关键字；左子树和右子树又各是一颗二叉排序树。</li>\n</ul>\n</li>\n<li>平衡二叉树：\n<ul>\n<li>树上任意结点的左子树和右子树的深度之差不超过1 。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>二叉树的顺序存储结构和链式存储结构实现</p>\n<ol>\n<li>\n<p>顺序结构存储<br />\n二叉树的顺序存储结构是指用一组地址连续的存储单元依次<code>自上而下、自左向右</code>地存储完全二叉树上地结点，即<code>将完全二叉树上编号为$i$地结点存储在一维数组下标为$i-1$中</code></p>\n<p>依据二叉树的性质，<code>完全二叉树和满二叉树采用顺序存储更加合适</code>，树中结点的序号可以唯一反应结点的逻辑关系，这样既能节省存储空间，又能利用数组元素的下标值迅速地确定结点在二叉树中的位置。</p>\n<p>但一般的二叉树中的空结点则需要在数组中相应位置进行补0，由此可能造成较大存储空间浪费</p>\n</li>\n<li>\n<p>链式结构存储<br />\n使用结构体或类构建结点：</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span>&#123;</span>\n   ElemType data;\n   <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BiTNode</span> *<span class=\"hljs-title\">lchild</span>,*<span class=\"hljs-title\">rchild</span>;</span>\n&#125;BiTNode,*BiTree\n</code></pre>\n<p>在含有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>个结点的二叉链表中，含有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>个空链域。</p>\n</li>\n</ol>\n<p>使用不同存储结构时，实现二叉树的操作算法也会不同，因此要根据实际应用场景选择合适的存储结构</p>\n</li>\n<li>\n<p>二叉树的遍历及应用<br />\n二叉树的遍历指按照某条搜索路径访问树中的每个节点，使得每个节点均被访问一次，而且仅被访问一次。由于二叉树是一种非线性结构，每个节点都可能有两颗子树，因此还需要寻找一种规律，以便使二叉树上的结点能排列在一个线性队列上，进而进行遍历。</p>\n<p>常见的遍历次序有：先序(NLR)、中序(LNR)、后续(LRN)三种遍历算法，其中的序指的是根节点何时被访问，需要注意的是，左节点永远先于右节点被访问。</p>\n<h4 id=\"1-先序遍历\"><a class=\"markdownIt-Anchor\" href=\"#1-先序遍历\"></a> 1、 先序遍历</h4>\n<ul>\n<li>若二叉树为空，则直接返回</li>\n<li>先访问根节点</li>\n<li>先序遍历左子树</li>\n<li>先序遍历右子树</li>\n</ul>\n<p>代码如下：</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PerOrder</span><span class=\"hljs-params\">(BiTree T)</span> </span>&#123;\n   <span class=\"hljs-keyword\">if</span>(T != <span class=\"hljs-literal\">NULL</span>) &#123;\n      visit(T);\n      PerOrder(T-&gt;lchild);\n      PerOrder(T-&gt;rchild);\n   &#125;\n&#125;\n</code></pre>\n<h4 id=\"2-中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#2-中序遍历\"></a> 2、 中序遍历</h4>\n<ul>\n<li>若二叉树为空，直接返回</li>\n<li>中序遍历左子树</li>\n<li>访问根节点</li>\n<li>中序遍历右子树</li>\n</ul>\n<p>代码如下：</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InOrder</span><span class=\"hljs-params\">(BiTree T)</span> </span>&#123;\n   <span class=\"hljs-keyword\">if</span>(T != <span class=\"hljs-literal\">NULL</span>) &#123;\n      InOrder(T-&gt;lchild);\n      visit(T);\n      InOrder(T-&gt;rchild)\n   &#125;\n&#125;\n</code></pre>\n<h4 id=\"3-后序遍历\"><a class=\"markdownIt-Anchor\" href=\"#3-后序遍历\"></a> 3、 后序遍历</h4>\n<ul>\n<li>后序遍历左子树</li>\n<li>后序遍历右子树</li>\n<li>访问根节点</li>\n</ul>\n<p>代码如下：</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PostOrder</span><span class=\"hljs-params\">(BiTree T)</span> </span>&#123;\n   <span class=\"hljs-keyword\">if</span>(T != BULL) &#123;\n      PostOrder(T-&gt;lchild);\n      PostOrder(T-&gt;rchild);\n      visit(T);\n   &#125;\n&#125;\n</code></pre>\n<hr />\n<p>三种遍历算法中，不管采用哪种遍历算法，每个节点都访问一次且仅访问一次，故时间复杂度都是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>，在递归遍历中，递归工作栈的深度恰好为树的深度，故最坏情况下遍历算法的空间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<h3 id=\"递归算法和非递归算法的转换\"><a class=\"markdownIt-Anchor\" href=\"#递归算法和非递归算法的转换\"></a> 递归算法和非递归算法的转换</h3>\n<h4 id=\"中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#中序遍历\"></a> 中序遍历：</h4>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InOrder2</span><span class=\"hljs-params\">(BiTree T)</span> </span>&#123;\n   InitStack(S);\n   BiTree p = T;\n\n   <span class=\"hljs-keyword\">while</span>(p != <span class=\"hljs-literal\">NULL</span>||!isEmpty(S)) &#123;\n      <span class=\"hljs-keyword\">if</span>(p != <span class=\"hljs-literal\">NULL</span>) &#123;\n         <span class=\"hljs-comment\">//将根节点入栈并在下一个循环访问左节点</span>\n         Push(S,p);\n         p=p-&gt;lchild;\n      &#125; <span class=\"hljs-keyword\">else</span> &#123;\n         <span class=\"hljs-comment\">//出栈根节点的同时访问根节点</span>\n         Pop(S,p);\n         visit(p);\n         <span class=\"hljs-comment\">//下一个循环访问右节点</span>\n         p=p-&gt;rchild;\n      &#125;\n   &#125;\n&#125;\n</code></pre>\n<h4 id=\"先序遍历\"><a class=\"markdownIt-Anchor\" href=\"#先序遍历\"></a> 先序遍历：</h4>\n<p>先序遍历的实现与中序遍历相似，只需要在入栈时先访问根节点即可</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PreOrder2</span><span class=\"hljs-params\">(BiTree T)</span> </span>&#123;\n   InitStack(S);\n   BiTree p = T;\n\n   <span class=\"hljs-keyword\">while</span>(p != <span class=\"hljs-literal\">NULL</span>||!isEmpty(S)) &#123;\n      <span class=\"hljs-keyword\">if</span>(p != <span class=\"hljs-literal\">NULL</span>) &#123;\n         <span class=\"hljs-comment\">//访问根节点</span>\n         visit(p);\n         <span class=\"hljs-comment\">//将根节点入栈并在下一个循环访问左节点</span>\n         Push(S,p);\n         p=p-&gt;lchild;\n      &#125; <span class=\"hljs-keyword\">else</span> &#123;\n         <span class=\"hljs-comment\">//出栈根节点</span>\n         Pop(S,p);\n         <span class=\"hljs-comment\">//下一个循环访问右节点</span>\n         p=p-&gt;rchild;\n      &#125;\n   &#125;\n&#125;\n</code></pre>\n<h4 id=\"后序遍历\"><a class=\"markdownIt-Anchor\" href=\"#后序遍历\"></a> 后序遍历</h4>\n<p>后序遍历算法思想与之前两种不同，需要保证在根节点出栈时右节点已被访问完。</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PostOrder</span><span class=\"hljs-params\">(BiTree T)</span> </span>&#123;\n   InitStack(S);\n   p=T;\n   r=<span class=\"hljs-literal\">NULL</span>;  <span class=\"hljs-comment\">//用于记录最近访问过的结点</span>\n   <span class=\"hljs-keyword\">while</span>(p != <span class=\"hljs-literal\">NULL</span>||!IsEmpty(S)) &#123;\n      <span class=\"hljs-keyword\">if</span> (p) &#123;\n         Push(S,p);\n         <span class=\"hljs-comment\">//走到最左边</span>\n         p=p-&gt;lchild;\n      &#125; <span class=\"hljs-keyword\">else</span> &#123;\n         <span class=\"hljs-comment\">//获取根节点</span>\n         Peek(S,p);\n         <span class=\"hljs-keyword\">if</span>(p-&gt;rchild != <span class=\"hljs-literal\">NULL</span>&amp;&amp;p-&gt;rchild != r) &#123;\n         <span class=\"hljs-comment\">//走到右边</span>\n         p=p-&gt;rchild;\n         &#125; <span class=\"hljs-keyword\">else</span> &#123;\n         Pop(S,p);\n         visit(p);\n         r=p;\n         p=<span class=\"hljs-literal\">NULL</span>;\n         &#125;\n      &#125;\n   &#125;\n&#125;\n</code></pre>\n<h4 id=\"层次遍历\"><a class=\"markdownIt-Anchor\" href=\"#层次遍历\"></a> 层次遍历</h4>\n<p>需要借助队列实现，每访问一个节点就将该节点的孩子节点输入队列，并将该节点出队</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">LevelOrder</span><span class=\"hljs-params\">(BiTree T)</span> </span>&#123;\n   InitQueue(Q);\n   BiTree p;\n   EnQueue(Q,T);\n   <span class=\"hljs-keyword\">while</span>(!IsEmpty(Q)) &#123;\n      DeQueue(Q,p);\n      visit(p);\n      <span class=\"hljs-keyword\">if</span>(p-&gt;lchild != <span class=\"hljs-literal\">NULL</span>) &#123;\n         EnQueue(Q,p-&gt;lchild);\n      &#125;\n      <span class=\"hljs-keyword\">if</span>(p-&gt;rchild != <span class=\"hljs-literal\">NULL</span>) &#123;\n         EnQueue(Q,p-&gt;rchild);\n      &#125;\n   &#125;\n&#125;\n</code></pre>\n<h4 id=\"由遍历序列构建二叉树\"><a class=\"markdownIt-Anchor\" href=\"#由遍历序列构建二叉树\"></a> 由遍历序列构建二叉树</h4>\n<ul>\n<li>二叉树的先序序列和中序序列可以唯一确定一颗二叉树\n<ul>\n<li>先序遍历中第一个结点一定是二叉树的根节点；中序遍历中，根节点必然将中序序列分割为两个子序列，前一个子序列是根节点的左子树的中序序列，后一个子序列是根节点的右子树的中序序列。</li>\n</ul>\n</li>\n<li>二叉树的后序序列和中序序列也可以唯一确定一颗二叉树</li>\n<li>二叉树的层序序列和中序序列也可以唯一确定一颗二叉树</li>\n</ul>\n<p>除了先序序列和后序序列其余两种任意序列的组合都可以构建出二叉树。构建二叉树需要明确知道根节点和左右子树，而先序序列和后序序列无法确定左右子树。</p>\n</li>\n<li>\n<p>二叉排序（查找. 检索）树</p>\n</li>\n<li>\n<p>平衡的二叉检索树- AVL树</p>\n</li>\n<li>\n<p>堆</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> DEFAULT_DATA_SIZE 10</span>\n<span class=\"hljs-comment\">/***\n* 大顶堆\n*/</span>\n<span class=\"hljs-keyword\">template</span>&lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">T</span>&gt;\n<span class=\"hljs-title\">class</span> <span class=\"hljs-title\">Heap</span>\n&#123;</span>\n<span class=\"hljs-keyword\">private</span>:\n   <span class=\"hljs-comment\">/* data */</span>\n   T* _data;\n   <span class=\"hljs-keyword\">size_t</span> _max_size = <span class=\"hljs-number\">0</span>;\n   <span class=\"hljs-keyword\">size_t</span> size = <span class=\"hljs-number\">0</span>;\n\n   <span class=\"hljs-keyword\">size_t</span> _get_left_child_index(<span class=\"hljs-keyword\">size_t</span> index) &#123;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>*index+<span class=\"hljs-number\">1</span>;\n   &#125;\n\n   <span class=\"hljs-keyword\">size_t</span> _get_right_child_index(<span class=\"hljs-keyword\">size_t</span> index) &#123;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>*index+<span class=\"hljs-number\">2</span>;\n   &#125;\n\n   <span class=\"hljs-keyword\">size_t</span> _get_root_index(<span class=\"hljs-keyword\">size_t</span> index) &#123;\n      <span class=\"hljs-keyword\">return</span> (index<span class=\"hljs-number\">-1</span>)/<span class=\"hljs-number\">2</span>;\n   &#125;\n\n   <span class=\"hljs-keyword\">bool</span> _is_empty() &#123;\n      <span class=\"hljs-keyword\">return</span> size == <span class=\"hljs-number\">0</span>;\n   &#125;\n\n   <span class=\"hljs-keyword\">bool</span> _is_full() &#123;\n      <span class=\"hljs-keyword\">return</span> size == _max_size;\n   &#125;\n\n   <span class=\"hljs-keyword\">void</span> _alloc() &#123;\n      T* tmp = _data;\n      _data = <span class=\"hljs-keyword\">new</span> T[_max_size*<span class=\"hljs-number\">2</span>];\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; _max_size; i++)\n      &#123;\n            _data[i] = tmp[i];\n      &#125;\n      _max_size *= <span class=\"hljs-number\">2</span>;\n      <span class=\"hljs-keyword\">delete</span>[] tmp;\n   &#125;\n\n   <span class=\"hljs-keyword\">void</span> _shiftUp(<span class=\"hljs-keyword\">size_t</span> index) &#123;\n      <span class=\"hljs-keyword\">if</span> (index == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>;\n      <span class=\"hljs-keyword\">size_t</span> root = _get_root_index(index);\n      <span class=\"hljs-keyword\">if</span> (_data[root] &lt; _data[index])\n      &#123;\n            T tmp = _data[root];\n            _data[root] = _data[index];\n            _data[index] = tmp;\n      &#125;\n\n      _shiftUp(root);\n   &#125;\n\n   <span class=\"hljs-keyword\">void</span> _shiftDown(<span class=\"hljs-keyword\">size_t</span> index) &#123;\n      <span class=\"hljs-keyword\">if</span> (index == size) <span class=\"hljs-keyword\">return</span>;\n      <span class=\"hljs-keyword\">size_t</span> lc = _get_left_child_index(index);\n      <span class=\"hljs-keyword\">size_t</span> rc = _get_right_child_index(index);\n      <span class=\"hljs-keyword\">size_t</span> max = lc &gt; rc ? lc : rc;\n      <span class=\"hljs-keyword\">if</span> (_data[max] &gt; _data[index])\n      &#123;\n            T tmp = _data[max];\n            _data[max] = _data[index];\n            _data[index] = tmp;\n            _shiftDown(lc);\n      &#125;\n   &#125;\n\n<span class=\"hljs-keyword\">public</span>:\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">Heap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">size_t</span> max_size = DEFAULT_DATA_SIZE)</span> </span>&#123;\n      _max_size = max_size;\n      _data = <span class=\"hljs-keyword\">new</span> T[_max_size];\n   &#125;\n\n   ~Heap() &#123;\n      <span class=\"hljs-keyword\">delete</span>[] _data;\n   &#125;\n\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(T data)</span> </span>&#123;\n      <span class=\"hljs-keyword\">if</span> (_is_full())\n      &#123;\n            _alloc();\n      &#125;\n\n      _data[size] = data;\n      _shiftUp(size);\n      size++;\n   &#125;\n\n   <span class=\"hljs-function\">T <span class=\"hljs-title\">removeAt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">size_t</span> index)</span> </span>&#123;\n      T data = _data[index];\n      _data[index] = _data[--size];\n      _shiftDown(index);\n      <span class=\"hljs-keyword\">return</span> data;\n   &#125;\n\n   <span class=\"hljs-function\">T <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">()</span> </span>&#123;\n      <span class=\"hljs-keyword\">return</span> removeAt(<span class=\"hljs-number\">0</span>);\n   &#125;\n\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">size_t</span> <span class=\"hljs-title\">length</span><span class=\"hljs-params\">()</span> </span>&#123;\n      <span class=\"hljs-keyword\">return</span> size;\n   &#125;\n\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">size_t</span> <span class=\"hljs-title\">getMaxSize</span><span class=\"hljs-params\">()</span> </span>&#123;\n      <span class=\"hljs-keyword\">return</span> _max_size;\n   &#125;\n\n   <span class=\"hljs-function\"><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;\n      <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> s = <span class=\"hljs-string\">\"[\"</span>;\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\n      &#123;\n            s += to_string(*(_data+i));\n            <span class=\"hljs-keyword\">if</span> (i != size<span class=\"hljs-number\">-1</span>)\n            &#123;\n               s += <span class=\"hljs-string\">\" ,\"</span>;\n            &#125; <span class=\"hljs-keyword\">else</span> &#123;\n               s += <span class=\"hljs-string\">\"] size = \"</span>+to_string(size) + <span class=\"hljs-string\">\" max_size = \"</span>+to_string(_max_size);\n            &#125;\n      &#125;\n\n      <span class=\"hljs-keyword\">return</span> s;\n   &#125;\n\n&#125;;\n</code></pre>\n</li>\n<li>\n<p>哈夫曼（Huffman）树和哈夫曼编码</p>\n</li>\n</ol>\n<h3 id=\"二树\"><a class=\"markdownIt-Anchor\" href=\"#二树\"></a> （二）树</h3>\n<ol>\n<li>\n<p>树的定义与术语</p>\n<h4 id=\"树的定义\"><a class=\"markdownIt-Anchor\" href=\"#树的定义\"></a> 树的定义</h4>\n<p>树是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>≥</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n(n \\geq 0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>个节点的有限集。当<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>时，称为空树。在任意一颗空树中应满足：</p>\n<ul>\n<li>有且只有一个特定称为根的节点</li>\n<li>当<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n &gt; 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>时，其余节点可分为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>&gt;</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">m (m&gt;0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>个互不相交的有限集<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>T</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>T</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_1,T_2,...,T_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，其中每个集合本身又是一棵树，并且称为根的子树。</li>\n</ul>\n<p>显然，树的定义是递归的，即在书的定义中又用到了自身，树是一种递归的数据结构。树作为一种逻辑结构，同时也是一种分层结构，具有以下两个特点：</p>\n<ul>\n<li>树的根节点没有前驱，除根节点外的所有节点有且只有一个前驱。</li>\n<li>树的所有节点可以有零个或多个后继。</li>\n</ul>\n<p>树适合于表示具有层次的数据。树中的某个节点（除根节点外）最多只和上一层的一个节点（即其父节点）有直接关系，根节点没有直接上层节点，因此在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>个节点的树中有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>条边。而树中每个节点与其下一层的零个或多个节点（即其子女节点）有直接关系。</p>\n<h4 id=\"基本术语\"><a class=\"markdownIt-Anchor\" href=\"#基本术语\"></a> 基本术语</h4>\n<ul>\n<li>树中一个节点的孩子个数称为该节点的度，<strong>树中节点的最大度数称为树的度</strong>。</li>\n<li>度大于0的节点称为<em>分支节点</em>，度为0的节点称为<em>叶子节点</em>。在分支结点中，每个结点的分支数就是该结点的度。</li>\n<li>结点的深度、高度和层次</li>\n<li>结点的深度是从根节点开始自顶向下逐层累加的</li>\n<li>结点的高度是从叶节点开始自底向上逐层累加的</li>\n<li>树的高度是树中节点的最大层数</li>\n<li>有序树和无序树</li>\n<li>有序树：树中的结点的各子树从左到右是有次序的，不能互换（次序人为规定）</li>\n<li>无序树：否则成为无序树</li>\n<li>路径和路径长度</li>\n<li>路径：由树中这两个结点之间所经过的结点序列构成的</li>\n<li>路径长度：路径所经过的边的数量</li>\n<li>森林是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>≥</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">m(m \\geq 0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>棵互不相交的树的集合。森林的概念与树的概念十分相近，因为只要把树的根节点删去就成了森林。反之，只要给<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>棵独立的树加上一个结点，并把这<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>棵树作为该节点的子树，则森林就变成了树</li>\n</ul>\n<p>树具有如下基本性质：</p>\n<ul>\n<li>树中的节点数等于所有结点度数之和加1</li>\n<li>度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>的树中第<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span>层上至多有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>m</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup><mtext>  </mtext><mo stretchy=\"false\">(</mo><mi>i</mi><mo>≥</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">m^{i-1} \\ \\ (i \\geq 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>高度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span></span></span></span>的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>叉树最多有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>m</mi><mi>k</mi></msup><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(m^k -1)/(m-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>个节点</li>\n<li>具有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>个结点的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span>叉树的最小高度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>m</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\log_m(n(m-1)+1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.057252em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n</li>\n<li>\n<p>树的遍历</p>\n</li>\n<li>\n<p>树的顺序存储结构和链式存储结构实现</p>\n</li>\n</ol>\n<hr />\n<h2 id=\"四-图\"><a class=\"markdownIt-Anchor\" href=\"#四-图\"></a> 四、 图</h2>\n<h3 id=\"一图的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#一图的基本概念\"></a> （一）图的基本概念</h3>\n<p>图G由顶点集V和边集E组成，记为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G=(V,E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span>，其中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>V</mi><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">V(G)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">G</span><span class=\"mclose\">)</span></span></span></span>表示图G中顶点的有限非空集；<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">E(G)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">G</span><span class=\"mclose\">)</span></span></span></span>表示图中顶点之间的关系（边）集合。</p>\n<p><code>线性表可以是空表、树可以有空树，但图不能是空图，图中至少有一个节点，但可以没有边</code></p>\n<ol>\n<li>\n<p>有向图<br />\n若E是有向边(弧)的有限集合时，图G为有向图，。弧是顶点的有序对，记为&lt;v,w&gt;，其中v,w是顶点，v称为弧尾，w称为弧头。也称v邻接到w。</p>\n</li>\n<li>\n<p>无向图<br />\n若E是无向边(边)的有限集合时，图G为无向图。边是顶点的无序对，记为(v,w)或(w,v)。可以说w和v互为邻接点。</p>\n</li>\n<li>\n<p>简单图、多重图<br />\n一个图若满足：</p>\n<ol>\n<li>不存在重复边</li>\n<li>不存在顶点到自身的边</li>\n</ol>\n<p>则称该图为简单图。<br />\n若图中某两个顶点之间的边数大于1，又允许顶点通过一条边和自身关联，则称该图为多重图。</p>\n</li>\n<li>\n<p>完全图（简单完全图）<br />\n对于无向图，|E|的取值范围在0<sub>$n(n-1)/2$之间，有$n(n-1)/2$条边的无向图称为完全图，在完全图中任意两个顶点之间都存在边；对于有向图，|E|的取值范围在0</sub><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n(n-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>之间，有<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n(n-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>条边的有向图称为完全有向图，有向完全图中任意两个顶点之间都存在方向相反的两条弧。</p>\n</li>\n<li>\n<p>子图<br />\n若存在一个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>G</mi><mo mathvariant=\"normal\">′</mo></msup><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>V</mi><mo mathvariant=\"normal\">′</mo></msup><mo separator=\"true\">,</mo><msup><mi>E</mi><mo mathvariant=\"normal\">′</mo></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G&#x27;=(V&#x27;,E&#x27;)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>使得<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>V</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">V&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span></span></span></span>的子集，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>E</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">E&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span>的子集，则将<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>G</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">G&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>称为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">G</span></span></span></span>的子图。若<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>V</mi><mo mathvariant=\"normal\">′</mo></msup><mo>=</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V&#x27;=V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span></span></span></span>，则将<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>G</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">G&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>称为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">G</span></span></span></span>的生成子图。</p>\n</li>\n<li>\n<p>连通、连通图和连通分量(特指无向图)</p>\n</li>\n</ol>\n<ul>\n<li>连通：在无向图中，若从顶点v到顶点w有路径存在，则称v和w是连通的。</li>\n<li>连通图：若图中任意两个顶点都是连通的，则称该图为连通图，否则便是非连通图。</li>\n<li>连通分量：无向图中的极大连通子图称为该图的连通分量。(极大连通子图即该图的连通子图且该子图拥有的顶点数无法再增加，若增加就不在连通，且包含所有边)</li>\n</ul>\n<ol start=\"7\">\n<li>强连通图、强连通分量(特指有向图)</li>\n</ol>\n<ul>\n<li>强连通：<strong>有向图</strong>中若v到w和w到v之间都存在路径，则称这两个顶点是强连通的。</li>\n<li>强连通图：有向图中的任意两个结点都是强连通的，则该图称为强连通图。</li>\n<li>强连通分量：有向图中的极大强连通子图。</li>\n</ul>\n<ol start=\"8\">\n<li>生成树、生成森林</li>\n</ol>\n<ul>\n<li>生成树：包含图中所有结点的一个极小连通图。<strong>若图中有n个顶点，则生成树有n-1条边</strong>(极小连通图需要保证的是图的连通且边数最少)(若砍去生成树中的一条边，则该极小连通图退化为非连通图，若加上一条边则会产生一个回路)</li>\n<li>生成森林：非连通图中的连通子图的生成树构成了一片生成森林。</li>\n</ul>\n<ol start=\"9\">\n<li>顶点的度、出度、入度</li>\n</ol>\n<ul>\n<li>度：依附于顶点的边的条数，记为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mi>D</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">TD(v)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span></span></span></span>。对于具有n个顶点、e条边的无向图，所有顶点的度之和为2e(一条边代表两个度嘛)。有向图的顶点的度为该顶点出度和入度之和。</li>\n<li>入度：在有向图中以顶点v为终点的边的数目，记为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mi>D</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ID(v)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>出度：在有向图中以顶点v为起点的边的数目，记为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mi>D</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">OD(v)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>在有向图中所有顶点的出度和等于所有顶点的入度和</li>\n</ul>\n<ol start=\"10\">\n<li>边的权和网</li>\n</ol>\n<ul>\n<li>权值：每条边都可以标注具有某种意义的数值，该值称为权值</li>\n<li>网： 边上带有权值的图称为带权图，或<strong>网</strong></li>\n</ul>\n<ol start=\"11\">\n<li>稠密图、稀疏图</li>\n</ol>\n<ul>\n<li>稀疏图：边数很少的图</li>\n<li>稠密图：边数很多的图</li>\n<li>判断条件：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>E</mi><mi mathvariant=\"normal\">∣</mi><mo>&lt;</mo><mi mathvariant=\"normal\">∣</mi><mi>V</mi><mi mathvariant=\"normal\">∣</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi mathvariant=\"normal\">∣</mi><mi>V</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|E| &lt; |V|log|V|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord\">∣</span></span></span></span>，则为稀疏图</li>\n</ul>\n<ol start=\"12\">\n<li>路径、路径长度、回路</li>\n</ol>\n<ul>\n<li>路径:顶点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>v</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>v</mi><mi>q</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>之间的一条路径指顶点序列<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>v</mi><mi>p</mi></msub><mo separator=\"true\">,</mo><msub><mi>v</mi><mi>i</mi></msub><mn>1</mn><mo separator=\"true\">,</mo><msub><mi>v</mi><mi>i</mi></msub><mn>2</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>v</mi><mi>i</mi></msub><mi>n</mi><mo separator=\"true\">,</mo><msub><mi>v</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">v_p,v_i1,v_i2,...,v_in,v_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9305479999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>路径长度：路径上边的数量</li>\n<li>回路：第个顶点和最后一个顶点相同的路径称为回路。若一个图有n个顶点，但有大于n-1条边，则此图一定存在回路。</li>\n</ul>\n<ol start=\"14\">\n<li>\n<p>距离<br />\n从顶点u出发到v的最短路径长度，若该路径不存在，则距离为无穷∞</p>\n</li>\n<li>\n<p>有向树<br />\n一个顶点的入度为0、其余顶点的入度均为1 的图称为有向树。</p>\n</li>\n</ol>\n<h3 id=\"二图的存储及基本操作\"><a class=\"markdownIt-Anchor\" href=\"#二图的存储及基本操作\"></a> （二）图的存储及基本操作</h3>\n<ol>\n<li>\n<p>邻接矩阵<br />\n采用一个一维数组存储图中顶点的信息，用一个二维数组存储图中边的信息(即各个顶点之间的关系)，存储顶点之间邻接关系的二维数组称为邻接矩阵。<br />\n<code>点中的数据使用一维数组保存，一维数组下表代表顶点编号，边使用二维数组保存，边的两个端点即二维数组的两个下标，由于这两个下标有ij和ji两种排列状态，故可以表示有向图。若为无向图时，该矩阵为对称矩阵。二维数组中的值代表有无边或者边的权值</code></p>\n<p>代码定义如下</p>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MaxVertexNum 100</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">char</span> VertesType;\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">int</span> EdgeType;\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>&#123;</span>\n   VertexType vex[MaxVertNum]; <span class=\"hljs-comment\">//顶点表，存数据</span>\n   EdgeType Edge[MaxVertexNum][MaxVertexNum]; <span class=\"hljs-comment\">//邻接表</span>\n   <span class=\"hljs-keyword\">int</span> vexnum,arcnum; <span class=\"hljs-comment\">//图的当前顶点数和弧数</span>\n&#125; MGraph;\n</code></pre>\n<ul>\n<li>在简单应用中，可以直接使用二维数组存储图，即忽略掉图的顶点信息</li>\n<li>当邻接矩阵的元素仅表示相应边是否存在时，EdgeType可采用值为0和1的枚举类型</li>\n<li>无向图的邻接矩阵是对称矩阵，对规模大的图可以压缩存储</li>\n<li>邻接矩阵表示法的空间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，其中n为图的顶点数</li>\n</ul>\n<p>特点：</p>\n<ol>\n<li>无向图的邻接矩阵一定是一个对称矩阵(并且唯一)</li>\n<li>对于无向图，邻接矩阵的第i行(或第i列)非零元素分个数正好是顶点i的度</li>\n<li>对于无向图，邻接矩阵的第i行非零元素的个数正好是顶点i的出度，第i列的非零元素刚好是顶点的入度</li>\n<li>用邻接矩阵存储图，很容易确定图中的任意两个顶点是否有边相连。但是，要确定图中有多少条边，则必须按行、列扫描检测，时间开销巨大。</li>\n<li>稠密图适合使用邻接表表示</li>\n</ol>\n</li>\n<li>\n<p>邻接表</p>\n</li>\n</ol>\n<h3 id=\"三图的遍历\"><a class=\"markdownIt-Anchor\" href=\"#三图的遍历\"></a> （三）图的遍历</h3>\n<ol>\n<li>深度优先搜索</li>\n<li>广度优先搜索</li>\n</ol>\n<h3 id=\"四图的应用\"><a class=\"markdownIt-Anchor\" href=\"#四图的应用\"></a> （四）图的应用</h3>\n<ol>\n<li>拓扑排序</li>\n<li>关键路径</li>\n<li>最短路径</li>\n<li>最小（代价）生成树</li>\n</ol>\n<hr />\n<h2 id=\"五-查找\"><a class=\"markdownIt-Anchor\" href=\"#五-查找\"></a> 五、 查找</h2>\n<h3 id=\"一查找的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#一查找的基本概念\"></a> （一）查找的基本概念</h3>\n<ol>\n<li>查找：在数据集合中寻找满足某种条件的数据元素的过程称为查找。查找的结果一般分为两种：查找成功和失败</li>\n<li>查找表：用于查找的数据集合称为查找表，它由同一类型的数据元素(或记录)组成</li>\n<li>静态查找表：若一个静态查找表只有查询指定数据和查找满足某个条件的数据的各种属性，无需动态地修改查找表，适合静态查找表的查找方法有：顺序查找，折半查找，散列查找等</li>\n<li>动态查找表：需要动态地添加和删除的查找表。适合动态查找表的查找方法有：二叉排序树查找，散列查找等</li>\n<li>关键字：数据元素中唯一标识该元素的某一个数据项的值，使用基于关键字的查找，查找结果应该是唯一的。</li>\n<li>平均查找长度：在查找过程中一次查找的长度是指需要比较的关键字次数，而平均查找长度则是所有查找过程中进行关键字的比较次数的平均值，其数学定义为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>P</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">ASL =  \\sum_{i=1}^{n}P_iC_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 式中，n是查找表的长度；<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">P_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是查找第i个数据的概率，一般认为每个数据元素的查找概率均等，即<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">P_i = 1/n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">n</span></span></span></span>；<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">C_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是找到第i个数据元素需要的比较次数。平均查找长度是衡量查找算法效率的最主要指标</li>\n</ol>\n<h3 id=\"二顺序查找法\"><a class=\"markdownIt-Anchor\" href=\"#二顺序查找法\"></a> （二）顺序查找法</h3>\n<h3 id=\"三折半查找法二分查找\"><a class=\"markdownIt-Anchor\" href=\"#三折半查找法二分查找\"></a> （三）折半查找法(二分查找)</h3>\n<h3 id=\"五散列hash表及冲突解决策略\"><a class=\"markdownIt-Anchor\" href=\"#五散列hash表及冲突解决策略\"></a> （五）散列（Hash）表及冲突解决策略</h3>\n<ol>\n<li>构造方法\n<ol>\n<li>直接定址法\n<ol>\n<li>H(key) = key 或 H(Key) = a*key + b</li>\n<li>适合关键字分布连续的情况</li>\n</ol>\n</li>\n<li>除留余数法\n<ol>\n<li>假定散列表长为m ,取一个不大于m 但最接近或等于m 的质数p ，将关键字按照公式<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>k</mi><mi>e</mi><mi>y</mi><mi mathvariant=\"normal\">%</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">H(key)=key\\%p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.94444em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">%</span><span class=\"mord mathdefault\">p</span></span></span></span>  转换为散列地址，需要选好p ，使得每个关键字通过函数转换后等概率地映射到散列空间上</li>\n</ol>\n</li>\n<li>数字分析法\n<ol>\n<li>设关键字是r进制数，而r 个数码在各位上出现的频率不一定相同，可能在某些位上分布的更均匀一些，每种数码出现的机会均等；而在某些位上分布不均匀，只有某几种数码经常出现，此时应选取数码分布较为均匀的若干位作为散列地址，这种发给发适用于已经知道关键字的集合，因为一旦关键字被修改，则需要重新构造一个新的散列函数</li>\n</ol>\n</li>\n<li>平方取中法\n<ol>\n<li>取关键字的平方值的中间几位作为散列地址。具体取多少位要视情况而定。这种方法得到的散列地址与关键字的每一位都有关系，所以可以使得散列地址分布比较均匀。适用于关键字的每位取值都不够均匀或者均小于散列地址所需要的位数</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>冲突解决策略\n<ol>\n<li>开放定址法\n<ol>\n<li>可存放新表项(Entry) 的空闲地址空间既向它的同义词表项开放，又向非同义词表项开放。记为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>H</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mi>H</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msub><mi>d</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">%</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">H_i=(H(key)+d_i)\\%m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">%</span><span class=\"mord mathdefault\">m</span></span></span></span> ，式子中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H(key)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>表示散列函数；<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo>≤</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">i=0,1,2,3,...,k  (k\\leq m-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>；<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span> 表示散列表长；<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">d_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>表示增量序列。</li>\n<li>增量序列确定后，对应的处理方法就是确定的。通常有如下四种方法：\n<ol>\n<li>线性探测法。当<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn><mi mathvariant=\"normal\">，</mi><mn>1</mn><mi mathvariant=\"normal\">，</mi><mn>2</mn><mi mathvariant=\"normal\">，</mi><mn>3</mn><mi mathvariant=\"normal\">，</mi><mi mathvariant=\"normal\">。</mi><mi mathvariant=\"normal\">。</mi><mi mathvariant=\"normal\">。</mi><mi mathvariant=\"normal\">，</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">d_i=0，1，2，3，。。。，m-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">0</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\">2</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\">3</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>时，称为线性探测法，这种方法的特点是：冲突发生时，顺序查看表中下一个单元(到达表的末尾<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">m-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>时，下一个探测地址就是表首地址0)，直到查找出一个空闲单元(表未填满时一定会找到一个空闲单元)或查遍全表。线性探测法可能使第i个散列地址的同义词存入第i+1个散列地址，这样本应存入第i+1个散列地址的同义词就只能存入i+2个散列地址，从而造成大量元素在相邻散列地址上“聚集”，极大降低了查找效率</li>\n<li>平方探测法(二次探测法)。增量序列<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mo>=</mo><msup><mn>0</mn><mn>2</mn></msup><mo separator=\"true\">,</mo><msup><mn>1</mn><mn>2</mn></msup><mo separator=\"true\">,</mo><mo>−</mo><msup><mn>1</mn><mn>2</mn></msup><mo separator=\"true\">,</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator=\"true\">,</mo><mo>−</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msup><mi>k</mi><mn>2</mn></msup><mo separator=\"true\">,</mo><mo>−</mo><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">d_i=0^2,1^2,-1^2,2^2,-2^2,...,k^2,-k^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo>≤</mo><mi>m</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(k\\leq m/2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord\">/</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span> 。散列表的长度必须是可以表示为4k+3的素数。平方探测法处理冲突可以避免出现“堆积”问题，缺点是不能探测到所有单元，但至少能探测到一半的单元</li>\n<li>再散列法(双散列法)。<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mo>=</mo><mi>H</mi><mi>a</mi><mi>s</mi><msub><mi>h</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d_i = Hash_2(key)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord\"><span class=\"mord mathdefault\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>，当第一个散列函数发生冲突时，通过第二个散列函数计算该关键字的地址增量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>H</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mi>H</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>i</mi><mo>∗</mo><msub><mi>H</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">%</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">H_i=(H(key)+i*H_2(key))\\%m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mord\">%</span><span class=\"mord mathdefault\">m</span></span></span></span> 其中i是发生冲突的次数，初始为0。最多经过<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">m-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>次探测便可以遍历表中所有的位置</li>\n<li>伪随机散列法。将<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">d_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>设置为伪随机数列。</li>\n</ol>\n</li>\n<li><code>在开放定址法中，不能随便物理删除表中元素，若删除元素，则会截断其它具有相同散列地址的元素的查找地址。因此，要删除一个元素时，可以给它做一个删除标记，进行逻辑删除。但是这样就需要定期维护散列表将其中被标记删除的元素进行物理删除</code></li>\n</ol>\n</li>\n<li>拉链法\n<ol>\n<li>为了避免非同义词产生冲突，可以通过把所有同义词存储到一个线性链表中，这个线性链表再由其散列地址唯一标识。适用于对数据进行大量删除和插入操作的情况</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"六查找算法的分析及应用\"><a class=\"markdownIt-Anchor\" href=\"#六查找算法的分析及应用\"></a> （六）查找算法的分析及应用</h3>\n<hr />\n<h2 id=\"六-内排序\"><a class=\"markdownIt-Anchor\" href=\"#六-内排序\"></a> 六、 内排序</h2>\n<h3 id=\"一排序的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#一排序的基本概念\"></a> （一）排序的基本概念</h3>\n<p>排序：指重新排列表中的元素，使表中的元素满足按关键字有序的过程。</p>\n<p>排序算法的稳定性：若待排序表中有两个元素<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>R</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>R</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>，其对应关键字相同即<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi><mi>e</mi><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><mi>k</mi><mi>e</mi><msub><mi>y</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">key_i = key_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">e</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">e</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>，且在排序前<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>R</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>R</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>前面，若使用某一排序算法排序后，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>R</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>仍然在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>R</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>前面，则称这个算法使稳定的，否则这个算法就是不稳定的</p>\n<p>在排序过程中根据数据元素是否完全在内存中可以将算法分为两类：<code>内部排序</code>和<code>外部排序</code></p>\n<ul>\n<li>内部排序：指在排序期间所有元素全部放在内存中的排序</li>\n<li>外部排序：指在排序期间元素无法全部同时存放在内存中，必须在排序的过程中根据要求不断地在内、外存之间移动的排序。</li>\n</ul>\n<h3 id=\"二直接插入排序\"><a class=\"markdownIt-Anchor\" href=\"#二直接插入排序\"></a> （二）直接插入排序</h3>\n<pre class=\"highlight\"><code class=\"java\">\n</code></pre>\n<h3 id=\"三冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#三冒泡排序\"></a> （三）冒泡排序</h3>\n<pre class=\"highlight\"><code class=\"java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bubbleSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] arr)</span> </span>&#123;\n    <span class=\"hljs-keyword\">int</span> temp = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = arr.length - <span class=\"hljs-number\">1</span>; i &gt; <span class=\"hljs-number\">0</span>; i--) &#123; <span class=\"hljs-comment\">// 每次需要排序的长度</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; i; j++) &#123; <span class=\"hljs-comment\">// 从第一个元素到第i个元素</span>\n            <span class=\"hljs-keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"hljs-number\">1</span>]) &#123;\n                temp = arr[j];\n                arr[j] = arr[j + <span class=\"hljs-number\">1</span>];\n                arr[j + <span class=\"hljs-number\">1</span>] = temp;\n            &#125;\n        &#125;<span class=\"hljs-comment\">//loop j</span>\n    &#125;<span class=\"hljs-comment\">//loop i</span>\n&#125;<span class=\"hljs-comment\">// method bubbleSort</span>\n</code></pre>\n<h3 id=\"四简单选择排序\"><a class=\"markdownIt-Anchor\" href=\"#四简单选择排序\"></a> （四）简单选择排序</h3>\n<pre class=\"highlight\"><code class=\"java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">selectionSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] arr)</span> </span>&#123;\n    <span class=\"hljs-keyword\">int</span> temp, min = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length - <span class=\"hljs-number\">1</span>; i++) &#123;\n        min = i;\n        <span class=\"hljs-comment\">// 循环查找最小值</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; arr.length; j++) &#123;\n            <span class=\"hljs-keyword\">if</span> (arr[min] &gt; arr[j]) &#123;\n                min = j;\n            &#125;\n        &#125;\n        <span class=\"hljs-keyword\">if</span> (min != i) &#123;\n            temp = arr[i];\n            arr[i] = arr[min];\n            arr[min] = temp;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>用数组实现的选择排序是不稳定的，用链表实现的选择排序是稳定的。</p>\n<h3 id=\"五希尔排序shell-sort\"><a class=\"markdownIt-Anchor\" href=\"#五希尔排序shell-sort\"></a> （五）希尔排序（shell sort）</h3>\n<p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>\n<ol>\n<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li>\n<li>按增量序列个数k，对序列进行 k 趟排序；</li>\n<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>\n</ol>\n<pre class=\"highlight\"><code class=\"java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">shellSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] arr)</span></span>&#123;\n    <span class=\"hljs-keyword\">int</span> temp;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> delta = arr.length/<span class=\"hljs-number\">2</span>; delta&gt;=<span class=\"hljs-number\">1</span>; delta/=<span class=\"hljs-number\">2</span>)&#123;                              <span class=\"hljs-comment\">//对每个增量进行一次排序</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=delta; i&lt;arr.length; i++)&#123;              \n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=i; j&gt;=delta &amp;&amp; arr[j]&lt;arr[j-delta]; j-=delta)&#123; <span class=\"hljs-comment\">//注意每个地方增量和差值都是delta</span>\n                temp = arr[j-delta];\n                arr[j-delta] = arr[j];\n                arr[j] = temp;\n            &#125;\n        &#125;<span class=\"hljs-comment\">//loop i</span>\n    &#125;<span class=\"hljs-comment\">//loop delta</span>\n&#125;\n</code></pre>\n<h3 id=\"六快速排序\"><a class=\"markdownIt-Anchor\" href=\"#六快速排序\"></a> （六）快速排序</h3>\n<p>从数列中挑出一个元素，称为&quot;基准&quot;（pivot），然后重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</p>\n<p>递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p>\n<pre class=\"highlight\"><code class=\"java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">quickSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] arr)</span></span>&#123;\n    qsort(arr, <span class=\"hljs-number\">0</span>, arr.length-<span class=\"hljs-number\">1</span>);\n&#125;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">qsort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] arr, <span class=\"hljs-keyword\">int</span> low, <span class=\"hljs-keyword\">int</span> high)</span></span>&#123;\n    <span class=\"hljs-keyword\">if</span> (low &gt;= high)\n        <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-keyword\">int</span> pivot = partition(arr, low, high);        <span class=\"hljs-comment\">//将数组分为两部分</span>\n    qsort(arr, low, pivot-<span class=\"hljs-number\">1</span>);                   <span class=\"hljs-comment\">//递归排序左子数组</span>\n    qsort(arr, pivot+<span class=\"hljs-number\">1</span>, high);                  <span class=\"hljs-comment\">//递归排序右子数组</span>\n&#125;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">partition</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] arr, <span class=\"hljs-keyword\">int</span> low, <span class=\"hljs-keyword\">int</span> high)</span></span>&#123;\n    <span class=\"hljs-keyword\">int</span> pivot = arr[low];     <span class=\"hljs-comment\">//基准</span>\n    <span class=\"hljs-keyword\">while</span> (low &lt; high)&#123;\n        <span class=\"hljs-keyword\">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivot) --high;\n        arr[low]=arr[high];             <span class=\"hljs-comment\">//交换比基准大的记录到左端</span>\n        <span class=\"hljs-keyword\">while</span> (low &lt; high &amp;&amp; arr[low] &lt;= pivot) ++low;\n        arr[high] = arr[low];           <span class=\"hljs-comment\">//交换比基准小的记录到右端</span>\n    &#125;\n    <span class=\"hljs-comment\">//扫描完成，基准到位</span>\n    arr[low] = pivot;\n    <span class=\"hljs-comment\">//返回的是基准的位置</span>\n    <span class=\"hljs-keyword\">return</span> low;\n&#125;\n</code></pre>\n<h3 id=\"七堆排序\"><a class=\"markdownIt-Anchor\" href=\"#七堆排序\"></a> （七）堆排序</h3>\n<p>堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。可以利用数组的特点快速定位指定索引的元素。堆排序就是把最大堆堆顶的最大数取出，将剩余的堆继续调整为最大堆，再次将堆顶的最大数取出，这个过程持续到剩余数只有一个时结束。<br />\n堆排序存在大量的筛选和移动过程，属于不稳定的排序算法。</p>\n<pre class=\"highlight\"><code class=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ArrayHeap</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[] arr;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ArrayHeap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] arr)</span> </span>&#123;\n        <span class=\"hljs-keyword\">this</span>.arr = arr;\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getParentIndex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> child)</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> (child - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>;\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getLeftChildIndex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> parent)</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * parent + <span class=\"hljs-number\">1</span>;\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> j)</span> </span>&#123;\n        <span class=\"hljs-keyword\">int</span> temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    &#125;\n    <span class=\"hljs-comment\">/**\n     * 调整堆。\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">adjustHeap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> len)</span> </span>&#123;\n        <span class=\"hljs-keyword\">int</span> left, right, j;\n        left = getLeftChildIndex(i);\n        <span class=\"hljs-keyword\">while</span> (left &lt;= len) &#123;\n            right = left + <span class=\"hljs-number\">1</span>;\n            j = left;\n            <span class=\"hljs-keyword\">if</span> (j &lt; len &amp;&amp; arr[left] &lt; arr[right]) &#123;\n                j++;\n            &#125;\n            <span class=\"hljs-keyword\">if</span> (arr[i] &lt; arr[j]) &#123;\n                swap(array, i, j);\n                i = j;\n                left = getLeftChildIndex(i);\n            &#125; <span class=\"hljs-keyword\">else</span> &#123;\n                <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// 停止筛选</span>\n            &#125;\n        &#125;\n    &#125;\n    <span class=\"hljs-comment\">/**\n     * 堆排序。\n     * */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sort</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">int</span> last = arr.length - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-comment\">// 初始化最大堆</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = getParentIndex(last); i &gt;= <span class=\"hljs-number\">0</span>; --i) &#123;\n            adjustHeap(i, last);\n        &#125;\n        <span class=\"hljs-comment\">// 堆调整</span>\n        <span class=\"hljs-keyword\">while</span> (last &gt;= <span class=\"hljs-number\">0</span>) &#123;\n            swap(<span class=\"hljs-number\">0</span>, last--);\n            adjustHeap(<span class=\"hljs-number\">0</span>, last);\n        &#125;\n    &#125;\n\n&#125;\n</code></pre>\n<h3 id=\"八归并排序\"><a class=\"markdownIt-Anchor\" href=\"#八归并排序\"></a> （八）归并排序</h3>\n<pre class=\"highlight\"><code class=\"java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">mergeSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] arr)</span></span>&#123;\n    <span class=\"hljs-keyword\">int</span>[] temp =<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[arr.length];\n    internalMergeSort(arr, temp, <span class=\"hljs-number\">0</span>, arr.length-<span class=\"hljs-number\">1</span>);\n&#125;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">internalMergeSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] arr, <span class=\"hljs-keyword\">int</span>[] temp, <span class=\"hljs-keyword\">int</span> left, <span class=\"hljs-keyword\">int</span> right)</span></span>&#123;\n    <span class=\"hljs-comment\">//当left==right的时，已经不需要再划分了</span>\n    <span class=\"hljs-keyword\">if</span> (left&lt;right)&#123;\n        <span class=\"hljs-keyword\">int</span> middle = (left+right)/<span class=\"hljs-number\">2</span>;\n        internalMergeSort(arr, temp, left, middle);          <span class=\"hljs-comment\">//左子数组</span>\n        internalMergeSort(arr, temp, middle+<span class=\"hljs-number\">1</span>, right);       <span class=\"hljs-comment\">//右子数组</span>\n        mergeSortedArray(arr, temp, left, middle, right);    <span class=\"hljs-comment\">//合并两个子数组</span>\n    &#125;\n&#125;\n<span class=\"hljs-comment\">// 合并两个有序子序列</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">mergeSortedArray</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> arr[], <span class=\"hljs-keyword\">int</span> temp[], <span class=\"hljs-keyword\">int</span> left, <span class=\"hljs-keyword\">int</span> middle, <span class=\"hljs-keyword\">int</span> right)</span></span>&#123;\n    <span class=\"hljs-keyword\">int</span> i=left;      \n    <span class=\"hljs-keyword\">int</span> j=middle+<span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">int</span> k=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (i&lt;=middle &amp;&amp; j&lt;=right)&#123;\n        temp[k++] = arr[i] &lt;= arr[j] ? arr[i++] : arr[j++];\n    &#125;\n    <span class=\"hljs-keyword\">while</span> (i &lt;=middle)&#123;\n        temp[k++] = arr[i++];\n    &#125;\n    <span class=\"hljs-keyword\">while</span> ( j&lt;=right)&#123;\n        temp[k++] = arr[j++];\n    &#125;\n    <span class=\"hljs-comment\">//把数据复制回原数组</span>\n    <span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">0</span>; i&lt;k; ++i)&#123;\n        arr[left+i] = temp[i];\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"九基数排序\"><a class=\"markdownIt-Anchor\" href=\"#九基数排序\"></a> （九）基数排序</h3>\n<p>将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p>\n<pre class=\"highlight\"><code class=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Sorter</span> </span>&#123;\n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] array)</span></span>;\n&#125;\n \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RadixSorter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Sorter</span> </span>&#123;\n     \n     <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> radix;\n     \n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">RadixSorter</span><span class=\"hljs-params\">()</span> </span>&#123;\n          radix = <span class=\"hljs-number\">10</span>;\n     &#125;\n     \n     <span class=\"hljs-meta\">@Override</span>\n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] array)</span> </span>&#123;\n          <span class=\"hljs-comment\">// 数组的第一维表示可能的余数0-radix，第二维表示array中的等于该余数的元素</span>\n          <span class=\"hljs-comment\">// 如：十进制123的个位为3，则bucket[3][] = &#123;123&#125;</span>\n          <span class=\"hljs-keyword\">int</span>[][] bucket = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[radix][array.length];\n          <span class=\"hljs-keyword\">int</span> distance = getDistance(array); <span class=\"hljs-comment\">// 表示最大的数有多少位</span>\n          <span class=\"hljs-keyword\">int</span> temp = <span class=\"hljs-number\">1</span>;\n          <span class=\"hljs-keyword\">int</span> round = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 控制键值排序依据在哪一位</span>\n          <span class=\"hljs-keyword\">while</span> (round &lt;= distance) &#123;\n               <span class=\"hljs-comment\">// 用来计数：数组counter[i]用来表示该位是i的数的个数</span>\n               <span class=\"hljs-keyword\">int</span>[] counter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[radix];\n               <span class=\"hljs-comment\">// 将array中元素分布填充到bucket中，并进行计数</span>\n               <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.length; i++) &#123;\n                    <span class=\"hljs-keyword\">int</span> which = (array[i] / temp) % radix;\n                    bucket[which][counter[which]] = array[i];\n                    counter[which]++;\n               &#125;\n               <span class=\"hljs-keyword\">int</span> index = <span class=\"hljs-number\">0</span>;\n               <span class=\"hljs-comment\">// 根据bucket中收集到的array中的元素，根据统计计数，在array中重新排列</span>\n               <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; radix; i++) &#123;\n                    <span class=\"hljs-keyword\">if</span> (counter[i] != <span class=\"hljs-number\">0</span>)\n                         <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; counter[i]; j++) &#123;\n                              array[index] = bucket[i][j];\n                              index++;\n                         &#125;\n                    counter[i] = <span class=\"hljs-number\">0</span>;\n               &#125;\n               temp *= radix;\n               round++;\n          &#125;\n     &#125;\n     \n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getDistance</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] array)</span> </span>&#123;\n          <span class=\"hljs-keyword\">int</span> max = computeMax(array);\n          <span class=\"hljs-keyword\">int</span> digits = <span class=\"hljs-number\">0</span>;\n          <span class=\"hljs-keyword\">int</span> temp = max / radix;\n          <span class=\"hljs-keyword\">while</span>(temp != <span class=\"hljs-number\">0</span>) &#123;\n               digits++;\n               temp = temp / radix;\n          &#125;\n          <span class=\"hljs-keyword\">return</span> digits + <span class=\"hljs-number\">1</span>;\n     &#125;\n     \n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">computeMax</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] array)</span> </span>&#123;\n          <span class=\"hljs-keyword\">int</span> max = array[<span class=\"hljs-number\">0</span>];\n          <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;array.length; i++) &#123;\n               <span class=\"hljs-keyword\">if</span>(array[i]&gt;max) &#123;\n                    max = array[i];\n               &#125;\n          &#125;\n          <span class=\"hljs-keyword\">return</span> max;\n     &#125;\n&#125;\n</code></pre>\n<h3 id=\"十各种内排序算法的比较\"><a class=\"markdownIt-Anchor\" href=\"#十各种内排序算法的比较\"></a> （十）各种内排序算法的比较</h3>\n<p><img src=\"/gallery/%E4%B8%8D%E5%90%8C%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E6%AF%94%E8%BE%83.png\" alt=\"各种内排序算法的比较\" /></p>\n",
            "tags": [
                "Review",
                "数据结构"
            ]
        }
    ]
}