{"title":"数据库系统","uid":"ab80b4e122bbda900a1a6ace41232d32","slug":"数据库系统","date":"2022-04-08T14:18:27.000Z","updated":"2023-11-17T03:38:51.971Z","comments":true,"path":"api/articles/数据库系统.json","keywords":"记录, 学习, ClaRnS","cover":[],"content":"<h1 id=\"数据库数据仓库\"><a class=\"markdownIt-Anchor\" href=\"#数据库数据仓库\"></a> 数据库（数据仓库）</h1>\n<p>数据库是<code>长期储存</code>在计算机内、有组织的、可共享的大量数据的集合</p>\n<p>数据库中的数据按照一定的数据模型组织、描述、存储。具有较小冗余度、较高数据独立性和易扩展性，并且可以为各种用户共享。</p>\n<p>数据库的基本特点：</p>\n<ol>\n<li>永久存储</li>\n<li>有组织</li>\n<li>可共享</li>\n</ol>\n<h2 id=\"数据库管理系统\"><a class=\"markdownIt-Anchor\" href=\"#数据库管理系统\"></a> 数据库管理系统</h2>\n<p>用户通过数据库管理系统操作数据库，数据库管理系统将操作系统的接口封装，为用户提供数据的定义、组织、存储、管理、操纵、数据库的事务管理和运行、数据库的建立和维护等工作。</p>\n<h2 id=\"数据库系统\"><a class=\"markdownIt-Anchor\" href=\"#数据库系统\"></a> 数据库系统</h2>\n<p>数据库系统内包含数据库、数据库管理系统、应用程序和数据库管理员。</p>\n<p>数据库系统是用于存储、管理、处理和维护数据的系统</p>\n<p><code>数据库系统与文件系统的区别：数据的结构化</code></p>\n<h2 id=\"数据模型\"><a class=\"markdownIt-Anchor\" href=\"#数据模型\"></a> 数据模型</h2>\n<p>概念模型：对数据和信息的建模<br />\n逻辑模型：数据之间的逻辑结构组成的模型<br />\n物理模型：物理机上存储的模型</p>\n<h3 id=\"definitions\"><a class=\"markdownIt-Anchor\" href=\"#definitions\"></a> Definitions</h3>\n<ul>\n<li>实体(Entity)：客观存在并可以互相区别的事务</li>\n<li>属性(Attribute)：实体的某一特性</li>\n<li>码(Key)：唯一标识实体的属性集</li>\n<li>实体型(Entity Set)：同一类型实体的集合</li>\n<li>联系(Relationship)：实体之间的联系，通常指不同<code>实体集</code>之间的联系</li>\n</ul>\n<h3 id=\"e-r图\"><a class=\"markdownIt-Anchor\" href=\"#e-r图\"></a> E-R图</h3>\n<p><img src=\"/gallery/ER-example.jpeg\" alt=\"E-R Example\" /></p>\n<h3 id=\"范式\"><a class=\"markdownIt-Anchor\" href=\"#范式\"></a> 范式</h3>\n<ol>\n<li>第一范式(确保每列保持原子性)\n<ul>\n<li>第一范式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。</li>\n<li>第一范式的合理遵循需要根据系统的实际需求来定。</li>\n<li>比如某些数据库系统中需要用到“地址”这个属性，本来直接将“地址”属性设计成一个数据库表的字段就行。但是如果系统经常会访问“地址”属性中的“城市”部分，那么就非要将“地址”这个属性重新拆分为省份、城市、详细地址等多个部分进行存储，这样在对地址中某一部分操作的时候将非常方便。</li>\n</ul>\n</li>\n<li>第二范式(确保表中的每列都和主键相关)\n<ul>\n<li>第二范式在第一范式的基础之上更进一层。第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</li>\n<li>比如要设计一个订单信息表，因为订单中可能会有多种商品，所以要将订单编号和商品编号作为数据库表的联合主键。</li>\n</ul>\n</li>\n<li>第三范式(确保每列都和主键列直接相关,而不是间接相关)\n<ul>\n<li>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</li>\n<li>比如在设计一个订单数据表的时候，可以将客户编号作为一个外键和订单表建立相应的关系。而不可以在订单表中添加关于客户其它信息（比如姓名、所属公司等）的字段。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"sql语句\"><a class=\"markdownIt-Anchor\" href=\"#sql语句\"></a> SQL语句</h2>\n<h3 id=\"索引\"><a class=\"markdownIt-Anchor\" href=\"#索引\"></a> 索引</h3>\n<ul>\n<li>hash索引：O(1)操作，适合单值查询，如 <em>=、in</em></li>\n<li>btree索引：适合单值查询和范围查询，如 <em>&lt;、&gt;、between</em></li>\n</ul>\n<h3 id=\"union操作符\"><a class=\"markdownIt-Anchor\" href=\"#union操作符\"></a> <code>UNION</code>操作符</h3>\n<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">SELECT</span> column_name <span class=\"hljs-keyword\">FROM</span> table1\n<span class=\"hljs-keyword\">UNION</span>\n<span class=\"hljs-keyword\">SELECT</span> column_name <span class=\"hljs-keyword\">FROM</span> table2;\n</code></pre>\n<p><code>UNION</code>操作符的作用是合并两个或者多个<code>SELECT</code>语句的查询结果。<br />\n<code>UNION</code>操作默认选取不同的值。如果需要允许重复的值，需要使用<code>UNION ALL</code>。</p>\n<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">SELECT</span> column_name <span class=\"hljs-keyword\">FROM</span> table1\n<span class=\"hljs-keyword\">UNION</span> <span class=\"hljs-keyword\">ALL</span>\n<span class=\"hljs-keyword\">SELECT</span> column_name <span class=\"hljs-keyword\">FROM</span> table2;\n</code></pre>\n<h3 id=\"select-into语句\"><a class=\"markdownIt-Anchor\" href=\"#select-into语句\"></a> <code>SELECT INTO</code>语句</h3>\n<p>MySQL不支持该语句，但可以用<code>INSERT INTO ... SELECT ...</code>代替。<br />\n下面语句将table1所有的列复制进newtable</p>\n<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">INTO</span> newtable <span class=\"hljs-keyword\">FROM</span> table1;\n</code></pre>\n<p>或者也可以将table1中的指定列复制进newtable</p>\n<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">SELECT</span> comun_name <span class=\"hljs-keyword\">INTO</span> newtable <span class=\"hljs-keyword\">FROM</span> table1;\n</code></pre>\n<h3 id=\"in操作符\"><a class=\"markdownIt-Anchor\" href=\"#in操作符\"></a> <code>IN</code>操作符</h3>\n<p><code>IN</code>操作符可以让<code>WHERE</code>在多个值中选择。</p>\n<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">SELECT</span> column_name1,column_name2,... \n<span class=\"hljs-keyword\">FROM</span> table1 \n<span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-keyword\">column</span> <span class=\"hljs-keyword\">IN</span> (value1, value2, ...);\n</code></pre>\n<h3 id=\"between操作符\"><a class=\"markdownIt-Anchor\" href=\"#between操作符\"></a> <code>BETWEEN</code>操作符</h3>\n<p><code>BETWEEN</code>操作符可以选取介于两个值之间的数据范围内的值。</p>\n<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">SELECT</span> column_name1, column_name2, ... \n<span class=\"hljs-keyword\">FROM</span> table1 \n<span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-keyword\">column</span> <span class=\"hljs-keyword\">BETWEEN</span> value1 <span class=\"hljs-keyword\">AND</span> value2;\n</code></pre>\n<p>value的值可以是数字、字符或者日期。<br />\n在MySQL中，<code>BETWEEN</code>操作符的选择会包括<em>value1</em>和<em>value2</em>。</p>\n<h3 id=\"order-by关键字\"><a class=\"markdownIt-Anchor\" href=\"#order-by关键字\"></a> <code>ORDER BY</code>关键字</h3>\n<p><code>ORDER BY</code>关键字用于对结果集合进行排序，排序结果可以是升序或者降序。</p>\n<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">SELECT</span> column_name1, column_name2, ...\n<span class=\"hljs-keyword\">FROM</span> table1\n<span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> column_name1, column_name2, ... <span class=\"hljs-keyword\">ASC</span>;\n</code></pre>\n<p>升序操作为<code>ASC</code>，是默认的；降序操作为<code>DESC</code>。<br />\n当有多个关键字需要排序时，将会按照语句中给出的顺序作为优先级进行排序。</p>\n<h3 id=\"join连接符\"><a class=\"markdownIt-Anchor\" href=\"#join连接符\"></a> <code>JOIN</code>连接符</h3>\n<p><code>JOIN</code>连接符用于将两个或是多个表的行结合起来。包括<code>LEFT JOIN, RIGHT JOIN, INNER JOIN, OUTER JOIN</code>。<br />\n<img src=\"//gallery//sql-join.png\" alt=\"SQL JOINS\" /></p>\n<ul>\n<li>INNER JOIN：如果表中有至少一个匹配，则返回行</li>\n<li>LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行</li>\n<li>RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行</li>\n<li>FULL JOIN：只要其中一个表中存在匹配，则返回行</li>\n</ul>\n<h3 id=\"check约束\"><a class=\"markdownIt-Anchor\" href=\"#check约束\"></a> <code>CHECK</code>约束</h3>\n<p><code>CHECK</code>约束用于限制列中的值得范围。</p>\n<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> Persons\n(\n   P_Id <span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n   LastName <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n   FirstName <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>),\n   Address <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>),\n   City <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>),\n   <span class=\"hljs-keyword\">CHECK</span> (P_Id&gt;<span class=\"hljs-number\">0</span>)\n);\n</code></pre>\n<p>或者在<code>ALTER TABLE</code>语句中</p>\n<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> Persons\n<span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">CHECK</span> (P_Id&gt;<span class=\"hljs-number\">0</span>);\n</code></pre>\n<h3 id=\"create-index语句\"><a class=\"markdownIt-Anchor\" href=\"#create-index语句\"></a> <code>CREATE INDEX</code>语句</h3>\n<p>该语句可用于在表中创建索引。在不读取整个表的情况下，索引可以加快数据库查找数据的速度。</p>\n<p>可以使用下列语句创建一个索引</p>\n<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">INDEX</span> index_name\n<span class=\"hljs-keyword\">ON</span> table_name (column_name, ...);\n</code></pre>\n<p>一个索引可以不只联系一个列，可以将多个列共同索引。</p>\n<p>可以使用下列语句创建一个唯一索引</p>\n<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">UNIQUE</span> <span class=\"hljs-keyword\">INDEX</span> index_name\n<span class=\"hljs-keyword\">ON</span> table_name (column_name, ...);\n</code></pre>\n<p>唯一索引不允许有两个相同值的行存在。</p>\n<h3 id=\"like操作符\"><a class=\"markdownIt-Anchor\" href=\"#like操作符\"></a> <code>LIKE</code>操作符</h3>\n<p><code>LIKE</code>操作符用于在<code>WHERE</code>子句中搜索列中的指定模式，使用<code>%</code>作为字符通配符，例如<code>%Y</code>将会匹配所有以<code>Y</code>结尾的字符串。</p>\n<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">SELECT</span> column_name, column_name1, ... \n<span class=\"hljs-keyword\">FROM</span> table_name\n<span class=\"hljs-keyword\">WHERE</span> column_name <span class=\"hljs-keyword\">LIKE</span> pattern;\n</code></pre>\n<p>通常情况下，pattern中的通配符有两种：</p>\n<ul>\n<li><code>%</code>：替代0个或多个字符</li>\n<li><code>_</code>：替代一个字符</li>\n</ul>\n<p>但是若要匹配正则表达式，则可以使用如下语句</p>\n<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> Websites\n<span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-keyword\">name</span> REGEXP <span class=\"hljs-string\">'^[GFs]'</span>;\n</code></pre>\n<p>上述语句将匹配所有以G、F、s开头的列。</p>\n<h3 id=\"auto_increment\"><a class=\"markdownIt-Anchor\" href=\"#auto_increment\"></a> <code>AUTO_INCREMENT</code></h3>\n<p>在MySQL中，创建表时添加<code>AUTO_INCREMENT</code>字段可以让属性自增。</p>\n<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> Persons\n(\n   <span class=\"hljs-keyword\">ID</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,\n   LastName <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n   FirstName <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>),\n   Address <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>),\n   City <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>),\n   PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-keyword\">ID</span>)\n);\n</code></pre>\n<p>默认地，AUTO_INCREMENT 的开始值是 1，每条新记录递增 1。</p>\n<p>要让 AUTO_INCREMENT 序列以其他的值起始，可以使用下面的 SQL 语法：</p>\n<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> Persons AUTO_INCREMENT=<span class=\"hljs-number\">100</span>\n</code></pre>\n<h3 id=\"alter-table\"><a class=\"markdownIt-Anchor\" href=\"#alter-table\"></a> <code>ALTER TABLE</code></h3>\n<p>该语句可以用于修改已有的表的列。</p>\n<ol>\n<li>在表中添加列<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name\n<span class=\"hljs-keyword\">ADD</span> column_name datatype\n</code></pre>\n</li>\n<li>在表中删除列<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name\n<span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">COLUMN</span> column_name\n</code></pre>\n</li>\n<li>在表中修改列<pre class=\"highlight\"><code class=\"SQL\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> Persons\n<span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">COLUMN</span> column_name datatype\n</code></pre>\n</li>\n</ol>\n","text":" 数据库（数据仓库） 数据库是长期储存在计算机内、有组织的、可共享的大量数据的集合 数据库中的数据按照一定的数据模型组织、描述、存储。具有较小冗余度、较高数据独...","permalink":"/post/数据库系统","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"基础","slug":"基础","count":7,"path":"api/categories/基础.json"}],"tags":[{"name":"数据库","slug":"数据库","count":1,"path":"api/tags/数据库.json"},{"name":"Review","slug":"Review","count":7,"path":"api/tags/Review.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93\"><span class=\"toc-text\"> 数据库（数据仓库）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\"> 数据库管理系统</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\"> 数据库系统</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\"> 数据模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#definitions\"><span class=\"toc-text\"> Definitions</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#e-r%E5%9B%BE\"><span class=\"toc-text\"> E-R图</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8C%83%E5%BC%8F\"><span class=\"toc-text\"> 范式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sql%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\"> SQL语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\"> 索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#union%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\"> UNION操作符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#select-into%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\"> SELECT INTO语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#in%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\"> IN操作符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#between%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\"> BETWEEN操作符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#order-by%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\"> ORDER BY关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#join%E8%BF%9E%E6%8E%A5%E7%AC%A6\"><span class=\"toc-text\"> JOIN连接符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#check%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\"> CHECK约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#create-index%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\"> CREATE INDEX语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#like%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\"> LIKE操作符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#auto_increment\"><span class=\"toc-text\"> AUTO_INCREMENT</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#alter-table\"><span class=\"toc-text\"> ALTER TABLE</span></a></li></ol></li></ol></li></ol>","author":{"name":"ClaRn","slug":"blog-author","avatar":"/gallery/avatar.jpg","link":"/","description":"当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"进程管理","uid":"d655af595b90ac0e0949f931f50e7fe8","slug":"进程管理","date":"2022-04-24T12:42:46.000Z","updated":"2023-09-19T15:08:35.420Z","comments":true,"path":"api/articles/进程管理.json","keywords":"记录, 学习, ClaRnS","cover":null,"text":" 进程 进程的概念和特征 进程的概念 从不同的角度看，进程可以有不同的定义，比较典型的是： 进程是程序的一次执行过程 进程是一个程序及其数据在处理机上顺序执行时...","permalink":"/post/进程管理","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Review","slug":"Review","count":7,"path":"api/tags/Review.json"},{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"}],"author":{"name":"ClaRn","slug":"blog-author","avatar":"/gallery/avatar.jpg","link":"/","description":"当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"操作系统概述","uid":"90140ac06394d08c40bf165531addc6d","slug":"操作系统概述","date":"2022-04-08T14:11:31.000Z","updated":"2023-09-19T15:08:35.420Z","comments":true,"path":"api/articles/操作系统概述.json","keywords":"记录, 学习, ClaRnS","cover":null,"text":" 操作系统的特征 并发：指两个或多个事件在同一时间间隔内发生。 共享：资源共享，指系统中的资源可供内存中多个并发执行的进程共同使用。 互斥型共享：资源在同一时刻...","permalink":"/post/操作系统概述","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"基础","slug":"基础","count":7,"path":"api/categories/基础.json"}],"tags":[{"name":"Review","slug":"Review","count":7,"path":"api/tags/Review.json"},{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"}],"author":{"name":"ClaRn","slug":"blog-author","avatar":"/gallery/avatar.jpg","link":"/","description":"当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}