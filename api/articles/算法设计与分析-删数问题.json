{"title":"算法设计与分析-删数问题","uid":"154af37c30e69f5d90663e52d5441592","slug":"算法设计与分析-删数问题","date":"2023-11-21T01:54:50.000Z","updated":"2023-11-21T09:54:58.641Z","comments":true,"path":"api/articles/算法设计与分析-删数问题.json","keywords":"记录, 学习, ClaRnS","cover":"/gallery/algo.png","content":"<h1 id=\"删数问题\"><a href=\"#删数问题\" class=\"headerlink\" title=\"删数问题\"></a>删数问题</h1><p>算法思想：将输入数字n按位存入数组，将数组从大到小排序并去除前s个元素，最小数必为剩下的<code>len(n) - s</code>个数的排列组合之一。从剩下的数中选取最小的数字作最高位，第i小的数作第i位，最后组合得到的数字即为最小数。</p>\n<p>示例如下：</p>\n<ul>\n<li>输入s = 178643</li>\n<li>输入n = 4</li>\n<li>将s转化为数组num，并按从大到小排序 </li>\n<li>num = [8, 7, 6, 4, 3, 1]</li>\n<li>去掉前s个数后的 num_left = [3, 1]</li>\n<li>最后得到 min_num_left = <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"21.081ex\" height=\"2.14ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -864 9318 946\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(722.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1444.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(3103.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4103.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4825.7,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(5547.9,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7262.2,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(8318,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(500,0)\"></path></g></g></g></svg></mjx-container></li>\n</ul>\n<div class=\"language-python\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">python</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DBD7CAEE\">n </span><span style=\"color: #666666\">=</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #B8A965\">input</span><span style=\"color: #666666\">()</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">s </span><span style=\"color: #666666\">=</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #B8A965\">int</span><span style=\"color: #666666\">(</span><span style=\"color: #B8A965\">input</span><span style=\"color: #666666\">())</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #758575DD\"># 初始化数据，将n转化为按位存储的数组</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">nums </span><span style=\"color: #666666\">=</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">[]</span></span>\n<span class=\"line\"><span style=\"color: #4D9375\">for</span><span style=\"color: #DBD7CAEE\"> i </span><span style=\"color: #4D9375\">in</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #B8A965\">range</span><span style=\"color: #666666\">(</span><span style=\"color: #B8A965\">len</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">n</span><span style=\"color: #666666\">)):</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">    nums</span><span style=\"color: #666666\">.</span><span style=\"color: #DBD7CAEE\">append</span><span style=\"color: #666666\">(</span><span style=\"color: #B8A965\">int</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">n</span><span style=\"color: #666666\">[</span><span style=\"color: #DBD7CAEE\">i</span><span style=\"color: #666666\">]))</span></span></code></pre></div><div class=\"language-python\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">python</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #758575DD\"># 对数组进行从大到小排序，去掉前s个元素，剩下的元素个数为最小的len(n) - s个，它们组合成的数字最小</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">nums</span><span style=\"color: #666666\">.</span><span style=\"color: #DBD7CAEE\">sort</span><span style=\"color: #666666\">(</span><span style=\"color: #BD976A\">reverse</span><span style=\"color: #666666\">=</span><span style=\"color: #4D9375\">True</span><span style=\"color: #666666\">)</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">nums_left </span><span style=\"color: #666666\">=</span><span style=\"color: #DBD7CAEE\"> nums</span><span style=\"color: #666666\">[</span><span style=\"color: #DBD7CAEE\">s</span><span style=\"color: #666666\">:]</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">min_num_left </span><span style=\"color: #666666\">=</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #4C9A91\">0</span></span></code></pre></div><div class=\"language-python\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">python</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #4D9375\">for</span><span style=\"color: #DBD7CAEE\"> i </span><span style=\"color: #4D9375\">in</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #B8A965\">range</span><span style=\"color: #666666\">(</span><span style=\"color: #B8A965\">len</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">nums_left</span><span style=\"color: #666666\">)):</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">    min_num_left </span><span style=\"color: #666666\">+=</span><span style=\"color: #DBD7CAEE\"> nums_left</span><span style=\"color: #666666\">[</span><span style=\"color: #DBD7CAEE\">i</span><span style=\"color: #666666\">]</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #CB7676\">*</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #4C9A91\">10</span><span style=\"color: #CB7676\">**</span><span style=\"color: #DBD7CAEE\">i</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">    </span></span>\n<span class=\"line\"><span style=\"color: #B8A965\">print</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">'</span><span style=\"color: #C98A7D\">n = </span><span style=\"color: #C99076\">%s</span><span style=\"color: #C98A7D\">, s = </span><span style=\"color: #C99076\">%d</span><span style=\"color: #C98A7D\">; </span><span style=\"color: #C99076\">\\n</span><span style=\"color: #C98A7D\">最后剩下的最小数 = </span><span style=\"color: #C99076\">%d</span><span style=\"color: #C98A7D99\">'</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #CB7676\">%</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">n</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> s</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> min_num_left</span><span style=\"color: #666666\">))</span></span></code></pre></div><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #dbd7caee\">n = 178643, s = 4; </span></span>\n<span class=\"line\"><span style=\"color: #dbd7caee\">最后剩下的最小数 = 26</span></span></code></pre></div><div class=\"language-python\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">python</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"></span></code></pre></div>","text":"删数问题算法思想：将输入数字n按位存入数组，将数组从大到小排序并去除前s个元素，最小数必为剩下的len(n) - s个数的排列组合之一。从剩下的数中选取最小的数...","permalink":"/post/算法设计与分析-删数问题","photos":[],"count_time":{"symbolsCount":664,"symbolsTime":"1 mins."},"categories":[{"name":"基础","slug":"基础","count":22,"path":"api/categories/基础.json"},{"name":"作业","slug":"基础/作业","count":14,"path":"api/categories/基础/作业.json"},{"name":"算法","slug":"基础/作业/算法","count":14,"path":"api/categories/基础/作业/算法.json"}],"tags":[{"name":"作业","slug":"作业","count":16,"path":"api/tags/作业.json"},{"name":"算法","slug":"算法","count":16,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%A0%E6%95%B0%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">删数问题</span></a></li></ol>","author":{"name":"ClaRn","slug":"blog-author","avatar":"/gallery/avatar.jpg","link":"/","description":"当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素","socials":{"github":"https://github.com/iYIYiYIYi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"算法设计与分析-课后练习16","uid":"8feb5684fd02f6eab97366f1f1224414","slug":"算法设计与分析-课后练习16","date":"2023-11-21T01:56:26.000Z","updated":"2023-11-21T09:57:07.630Z","comments":true,"path":"api/articles/算法设计与分析-课后练习16.json","keywords":"记录, 学习, ClaRnS","cover":"/gallery/algo.png","text":"课后练习16 pythontree = [ [9], [12, 15], [10, 6, 8], [2, 18, 9, 5], [19, 7, 10, 4, 1...","permalink":"/post/算法设计与分析-课后练习16","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"基础","slug":"基础","count":22,"path":"api/categories/基础.json"},{"name":"作业","slug":"基础/作业","count":14,"path":"api/categories/基础/作业.json"},{"name":"算法","slug":"基础/作业/算法","count":14,"path":"api/categories/基础/作业/算法.json"}],"tags":[{"name":"作业","slug":"作业","count":16,"path":"api/tags/作业.json"},{"name":"算法","slug":"算法","count":16,"path":"api/tags/算法.json"}],"author":{"name":"ClaRn","slug":"blog-author","avatar":"/gallery/avatar.jpg","link":"/","description":"当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素","socials":{"github":"https://github.com/iYIYiYIYi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"算法设计与分析-课后练习17","uid":"33d59b8f449d0f5a6ebd66551c65bd8e","slug":"算法设计与分析-课后练习17","date":"2023-11-21T01:09:57.000Z","updated":"2023-11-21T09:10:20.072Z","comments":true,"path":"api/articles/算法设计与分析-课后练习17.json","keywords":"记录, 学习, ClaRnS","cover":"/gallery/algo.png","text":"课后练习17 首先定义Floyd算法函数计算最短路径矩阵 pythondef floyd_algo(graph): matrix = [] m_size = l...","permalink":"/post/算法设计与分析-课后练习17","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"基础","slug":"基础","count":22,"path":"api/categories/基础.json"},{"name":"作业","slug":"基础/作业","count":14,"path":"api/categories/基础/作业.json"},{"name":"算法","slug":"基础/作业/算法","count":14,"path":"api/categories/基础/作业/算法.json"}],"tags":[{"name":"作业","slug":"作业","count":16,"path":"api/tags/作业.json"},{"name":"算法","slug":"算法","count":16,"path":"api/tags/算法.json"}],"author":{"name":"ClaRn","slug":"blog-author","avatar":"/gallery/avatar.jpg","link":"/","description":"当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素","socials":{"github":"https://github.com/iYIYiYIYi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}