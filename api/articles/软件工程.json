{"title":"软件工程中的开发模型","uid":"cfd4ec52764f9243a80a5ef9b48d3349","slug":"软件工程","date":"2023-03-23T16:41:13.000Z","updated":"2023-09-19T15:08:35.420Z","comments":true,"path":"api/articles/软件工程.json","keywords":"记录, 学习, ClaRnS","cover":null,"content":"<h2 id=\"软件开发生命周期software-development-lifecycle-sdlc\"><a class=\"markdownIt-Anchor\" href=\"#软件开发生命周期software-development-lifecycle-sdlc\"></a> 软件开发生命周期（software development lifecycle (SDLC) ）</h2>\n<p>软件的产生直到报废的生命周期，包括：问题定义、可行性分析、需求分析、总体设计、详细设计、编码、测试、运行维护等阶段。</p>\n<h2 id=\"软件开发模型\"><a class=\"markdownIt-Anchor\" href=\"#软件开发模型\"></a> 软件开发模型</h2>\n<h3 id=\"1-瀑布模型\"><a class=\"markdownIt-Anchor\" href=\"#1-瀑布模型\"></a> 1、瀑布模型</h3>\n<p>瀑布模型也称为生命周期发，是结构化方法中最常用的开发模型，可以分为<strong>软件计划、需求分析、软件设计、程序编码、软件测试和运行维护</strong>几个阶段。适合需求明确或变更少的项目</p>\n<h3 id=\"2-增量模型\"><a class=\"markdownIt-Anchor\" href=\"#2-增量模型\"></a> 2、增量模型</h3>\n<p>增量模型融合了瀑布模型的基本成分和原型实现的迭代特征，是第三种原型化开发方法，但它不是“抛弃式”的，也不是“渐进式”的。**增量模型把软件产品划分为一系列的增量构件，第一个增量往往是核心的产品，即第一个增量实现了基本的需求。**客户对每一个增量的使用和评估都作为下一个增量发布的新特征和功能，这个过程在每一个增量发布后不断重复，直到产生了最终的完善产品。增量模型与原型实现模型和其他演化方法一样，本质上是迭代的，但与原型实现不一样的是其强调每一个增量均发布一个可操作产品。增量模型将功能细化、分别开发的方法适应于需求经常改变的软件开发过程</p>\n<h3 id=\"3-螺旋模型\"><a class=\"markdownIt-Anchor\" href=\"#3-螺旋模型\"></a> 3、螺旋模型</h3>\n<p>螺旋模型以原型为基础，每一次螺旋都要<strong>经过制订计划、风险分析、实施工程及客户评价等活动，并开发原型的一个新版本</strong>，经过若干次螺旋上升的过程得到最终的系统。</p>\n<h3 id=\"4-喷泉模型\"><a class=\"markdownIt-Anchor\" href=\"#4-喷泉模型\"></a> 4、喷泉模型</h3>\n<p>喷泉模型是一种以用户需求为动力，以对象为驱动地模型，主要用于描述面向对象的软件开发过程，该模型认为软件开发过程自下而上的，各阶段是相互迭代和无间隙的。无间隙是指在开发活动中，分析、设计和编码之间不存在明显的边界。</p>\n<h3 id=\"5-v模型\"><a class=\"markdownIt-Anchor\" href=\"#5-v模型\"></a> 5、V模型</h3>\n<p>V 形模型也称为 V 模型或验证与验证模型，是瀑布方法的扩展。使用 V 模型时，进度并不会直线移动，而是在实施和开发后逐渐上升。</p>\n<p>对于 V 型 SDLC 项目，<strong>早期测试介入</strong>是与瀑布模型相比的主要区别。每个开发阶段都有一个并行测试阶段，这有助于在继续下一步之前验证和验证每个步骤。</p>\n<h3 id=\"快速原型模型\"><a class=\"markdownIt-Anchor\" href=\"#快速原型模型\"></a> 快速原型模型</h3>\n<p>快速原型是利用原型辅助软件开发的一种新思想。</p>\n<p>经过简单快速分析，快速建造一个可以运行的软件原型，以便理解和澄清问题，使开发人员与用户达成共识，最终在确定的用户需求基础上开发客户满意的软件产品。</p>\n<p>原型可以为三类：</p>\n<ol>\n<li>探索型原型：主要用于需求分析阶段，目的是要弄清用户的需求，并探索各种方案的可行性。它主要针对开发目标模糊，用户与开发人员对项目都缺乏经验的情况，通过对原型的开发来明确用户的需求</li>\n<li>实验型原型：主要用于设计阶段，考核实现方案是否合适，能否实现。对于大型系统，若对设计方案心中没有把握时，可通过这种原型来证实设计方案的正确性</li>\n<li>演化型原型：主要用于及早向用户提交一个原型系统，该原型系统或者包含系统的框架，或者包含系统的主要功能，在得到用户的认可后，将原型系统不断扩充演变为最终的软件系统</li>\n</ol>\n<h3 id=\"敏捷模型\"><a class=\"markdownIt-Anchor\" href=\"#敏捷模型\"></a> 敏捷模型</h3>\n<p>敏捷（Agile） SDLC 模型是迭代和增量方法的组合，致力于通过早期交付工作软件来适应灵活的需求并满足用户和客户的需求。敏捷项目中的需求和解决方案可能会在开发过程中发展。</p>\n<p>通过敏捷开发，该产品被分为小的增量构建，并以迭代方式交付。将所有任务划分为较小的时间范围，以便为每个版本准备工作功能。最终产品版本包含所有必需的功能。敏捷仍然是技术行业中使用最广泛的SDLC。</p>\n<p>常见的敏捷开发方法：</p>\n<ul>\n<li>极限编程(XP)</li>\n<li>自适应软件开发</li>\n<li>水晶方法</li>\n<li>特性驱动开发</li>\n<li>scrum</li>\n</ul>\n","text":" 软件开发生命周期（software development lifecycle (SDLC) ） 软件的产生直到报废的生命周期，包括：问题定义、可行性分析、需...","permalink":"/post/软件工程","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"基础","slug":"基础","count":7,"path":"api/categories/基础.json"}],"tags":[{"name":"Review","slug":"Review","count":7,"path":"api/tags/Review.json"},{"name":"软件工程","slug":"软件工程","count":1,"path":"api/tags/软件工程.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9Fsoftware-development-lifecycle-sdlc\"><span class=\"toc-text\"> 软件开发生命周期（software development lifecycle (SDLC) ）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\"> 软件开发模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\"> 1、瀑布模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%A2%9E%E9%87%8F%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\"> 2、增量模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%9E%BA%E6%97%8B%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\"> 3、螺旋模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%96%B7%E6%B3%89%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\"> 4、喷泉模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-v%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\"> 5、V模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\"> 快速原型模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%8F%E6%8D%B7%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\"> 敏捷模型</span></a></li></ol></li></ol>","author":{"name":"ClaRn","slug":"blog-author","avatar":"/gallery/avatar.jpg","link":"/","description":"当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"进程同步经典问题","uid":"e14beeee054107e61818821b5c2d1c74","slug":"进程同步经典问题","date":"2023-03-25T13:53:16.000Z","updated":"2023-09-19T15:08:35.420Z","comments":true,"path":"api/articles/进程同步经典问题.json","keywords":"记录, 学习, ClaRnS","cover":null,"text":" 信号量 信号量机制是一种用于解决互斥和同步问题的机制，包括两个原语wait(S)和signal(S)，也可以记为P操作和V操作。 管程 使用一个数据结构S来描...","permalink":"/post/进程同步经典问题","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Review","slug":"Review","count":7,"path":"api/tags/Review.json"},{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"}],"author":{"name":"ClaRn","slug":"blog-author","avatar":"/gallery/avatar.jpg","link":"/","description":"当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"编译原理考点","uid":"fba5abef53d9d5ea6aea61fb0369866c","slug":"编译原理考点","date":"2023-03-15T12:38:09.000Z","updated":"2023-11-20T04:05:44.181Z","comments":true,"path":"api/articles/编译原理考点.json","keywords":"记录, 学习, ClaRnS","cover":[],"text":" 编译原理作业： 正则表达式生成NFA/DFA LL1 词法分析 LR 词法分析 编译程序的功能组织结构图 ‘词法分析器→语法分析器→语义分析器→中间代码生成器...","permalink":"/post/编译原理考点","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"基础","slug":"基础","count":7,"path":"api/categories/基础.json"}],"tags":[{"name":"Review","slug":"Review","count":7,"path":"api/tags/Review.json"},{"name":"编译原理","slug":"编译原理","count":1,"path":"api/tags/编译原理.json"}],"author":{"name":"ClaRn","slug":"blog-author","avatar":"/gallery/avatar.jpg","link":"/","description":"当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}