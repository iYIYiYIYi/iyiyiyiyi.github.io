{"title":"CUDA C 中的PTX编程","uid":"b910ae60a17b1ab8f5a481a64bd4c8b5","slug":"PTX编程","date":"2023-11-29T02:40:49.000Z","updated":"2023-12-06T14:47:28.393Z","comments":true,"path":"api/articles/PTX编程.json","keywords":"记录, 学习, ClaRnS","cover":"/gallery/cuda.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>CUDA编程环境提供了一个并行线程执行指令集(PTX)用于使用GPU的数据并行计算能力。本指南用于将PTX汇编语句集成进CUDA C程序中。</p></blockquote>\n<h1 id=\"ASM语句\"><a href=\"#ASM语句\" class=\"headerlink\" title=\"ASM语句\"></a>ASM语句</h1><p>使用<code>asm()</code>将任意PTX汇编代码插入到你的CUDA程序中。一个简单的示例如下：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">membar.gl;</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">);</span></span></code></pre></div><p>该语句将PTX指令<code>membar.gl</code>插入到了程序生成的PTX code中，插入位置就在调用<code>asm()</code>函数的地方。</p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p>当涉及到传入和传出参数时，一个包含了PTX code的<code>asm()</code>语句可能变得非常复杂，但也会变得更有用。参数传递的基本语法如下：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">template-string</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">constraint</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">output</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">constraint</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">input</span><span style=\"color: #666666\">));</span></span></code></pre></div><p>通过使用逗号分隔，可以传递多个参数。示例代码中的<code>template-string</code>包含了操作数的引用。多条PTX指令可以通过使用分号分隔来传递。</p>\n<p>示例如下：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">add.s32 %0, %1, %2</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">i</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">j</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\">, </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">k</span><span style=\"color: #666666\">))</span></span></code></pre></div><p>每一个<code>%n</code>都是一个指向操作数的下标，比如<code>%0</code>指向<code>i</code>，<code>%1</code>指向<code>j</code>，<code>%2</code>指向<code>k</code>。PTX指令中，输出操作数永远都是第一个参数，所以它们被分配到了最小的下标。上例最终被翻译为如下PTX指令：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DBD7CAEE\">add.s32 i</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> j</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> k</span><span style=\"color: #666666\">;</span></span></code></pre></div><p>这种数字标记的顺序可以任意使用，比如说上例同样可以写为：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">add.s32 %0, %2, %1</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">i</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">k</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\">, </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">j</span><span style=\"color: #666666\">))</span></span></code></pre></div><p>也可以重复使用一个引用：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">add.s32 %0, %1, %1</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">i</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">k</span><span style=\"color: #666666\">))</span></span></code></pre></div><p>最终被编译为：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DBD7CAEE\">add.s32 i</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> k</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> k</span></span></code></pre></div><p>如果没有传入参数，最后一个冒号可以省略：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">mov.s32 %0, 2</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">i</span><span style=\"color: #666666\">))</span></span></code></pre></div><p>如果没有输入的话，两个冒号之间可以留空：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">mov.s32 r1, %0</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">::</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">i</span><span style=\"color: #666666\">))</span></span></code></pre></div><p>要在PTX指令中使用<code>%</code>符号，可以使用<code>%%</code>进行转义：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">mov.u32 %0, %clock;</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r(x)</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">);</span></span></code></pre></div><p>上述例子中为了说明<code>%</code>的作用而进行了简化。实际上，操作数是通过<strong>约束</strong>所定义的方式传递的，比如说<code>r</code>表示的就是一个32位的整数型寄存器，所以语句：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">add.s32 %0, %1, %2</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">i</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">j</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\">, </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">k</span><span style=\"color: #666666\">))</span></span></code></pre></div><p>实际上在编译器中产生了如下字节码序列：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DBD7CAEE\">ld.s32 r1</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">[</span><span style=\"color: #DBD7CAEE\">j</span><span style=\"color: #666666\">]</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">ld.s32 r2</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">[</span><span style=\"color: #DBD7CAEE\">k</span><span style=\"color: #666666\">]</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">add.s32 r3</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> r1</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> r2</span><span style=\"color: #666666\">;</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">st.s32 </span><span style=\"color: #666666\">[</span><span style=\"color: #DBD7CAEE\">i</span><span style=\"color: #666666\">],</span><span style=\"color: #DBD7CAEE\"> r3</span><span style=\"color: #666666\">;</span></span></code></pre></div><p>这就是为什么输入和输出操作数会有区别，因为需要保证在指令执行之前，操作数被载入了对应的寄存器。<code>=</code>操作符说明了要写入的目标寄存器，还有一个<code>+</code>操作符标记可读写的寄存器。比如：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">add.s32 %0, %0, %1;</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">+r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">i</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">j</span><span style=\"color: #666666\">));</span></span></code></pre></div><p>多条PTX指令可以合并到一个<code>asm()</code>语句中，基本上任何合法语句都能作为一个字符串参数传入<code>asm()</code>函数。多条指令也可以通过多个字符串分隔，只需要使用 C/C++ 的字符串拼接。同时在<code>asm()</code>函数内的PTX指令后写注释语句不受影响。为了生成更具有可读性的PTX中间文件，最好在每一个指令字符串的结尾都带上<code>\\n\\t</code>。</p>\n<p>举个例子，一个计算立方体体积的程序可以写为：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DBD7CAEE\">__device__ </span><span style=\"color: #CB7676\">int</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #80A665\">cube</span><span style=\"color: #666666\">(</span><span style=\"color: #CB7676\">int</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #BD976A\">x</span><span style=\"color: #666666\">)</span></span>\n<span class=\"line\"><span style=\"color: #666666\">{</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">    </span><span style=\"color: #CB7676\">int</span><span style=\"color: #DBD7CAEE\"> y</span><span style=\"color: #666666\">;</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">    </span><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">        </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">.reg .u32 t1;</span><span style=\"color: #C99076\">\\n\\t</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #758575DD\">             //temp reg t1</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">        </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">mul.lo.u32 t1, %1, %1;</span><span style=\"color: #C99076\">\\n\\t</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #758575DD\">    //t1 = x* x</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">        </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">mul.lo.u32 %0, t1, %1;</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #758575DD\">        //y = t1 * x</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">        </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">y</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">x</span><span style=\"color: #666666\">)</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">    </span><span style=\"color: #666666\">);</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">    </span><span style=\"color: #4D9375\">return</span><span style=\"color: #DBD7CAEE\"> y</span><span style=\"color: #666666\">;</span></span>\n<span class=\"line\"><span style=\"color: #666666\">}</span></span></code></pre></div><p>如果一个输出操作数是根据汇编指令的条件来更新的，那么就应该用<code>+</code>修饰符。示例如下：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DBD7CAEE\">__device__ </span><span style=\"color: #CB7676\">int</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #80A665\">cond</span><span style=\"color: #666666\">(</span><span style=\"color: #CB7676\">int</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #BD976A\">x</span><span style=\"color: #666666\">)</span></span>\n<span class=\"line\"><span style=\"color: #666666\">{</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">    </span><span style=\"color: #CB7676\">int</span><span style=\"color: #DBD7CAEE\"> y </span><span style=\"color: #666666\">=</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #4C9A91\">0</span><span style=\"color: #666666\">;</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">    </span><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">        </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">{</span><span style=\"color: #C99076\">\\n\\t</span><span style=\"color: #C98A7D99\">\"</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">        </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">   .reg .pred %p;</span><span style=\"color: #C99076\">\\n\\t</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\">             </span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">        </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">   setp.eq.s32 %p, %1, 34;</span><span style=\"color: #C99076\">\\n\\t</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #758575DD\">    // x == 34 ?</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">        </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">   @%p mov.s32 %0, 1;</span><span style=\"color: #C99076\">\\n\\t</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #758575DD\">         // 若为true将y设为1</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">        </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">}</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #758575DD\">                                 // 等价于 y = (x==34)?1:y</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">        </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">+r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">y</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">x</span><span style=\"color: #666666\">)</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">    </span><span style=\"color: #666666\">);</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">    </span><span style=\"color: #4D9375\">return</span><span style=\"color: #DBD7CAEE\"> y</span><span style=\"color: #666666\">;</span></span>\n<span class=\"line\"><span style=\"color: #666666\">}</span></span></code></pre></div><h2 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h2><p>不同的 PTX 寄存器类型有不同的字母约束，如下：</p>\n<ul>\n<li><code>h</code> = <code>.u16 reg</code></li>\n<li><code>r</code> = <code>.u32 reg</code></li>\n<li><code>l</code> = <code>.u64 reg</code></li>\n<li><code>f</code> = <code>.f32 reg</code></li>\n<li><code>d</code> = <code>.f64 reg</code></li>\n</ul>\n<p>示例如下：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">cvt.f32.s64 %0, %1;</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=f</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">x</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">l</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">y</span><span style=\"color: #666666\">));</span></span></code></pre></div><p>上述代码生成的字节码如下：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DBD7CAEE\">ld.s64 rd1</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">[</span><span style=\"color: #DBD7CAEE\">y</span><span style=\"color: #666666\">];</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">cvt.f32.s4 f1</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> rd1</span><span style=\"color: #666666\">;</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">st.f32 </span><span style=\"color: #666666\">[</span><span style=\"color: #DBD7CAEE\">x</span><span style=\"color: #666666\">],</span><span style=\"color: #DBD7CAEE\"> f1</span><span style=\"color: #666666\">;</span></span></code></pre></div><p>“n”型约束可以用于已知数值的整型操作数，示例如下：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">add.u32 %0, %0, %1;</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">x</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">n</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #4C9A91\">42</span><span style=\"color: #666666\">));</span></span></code></pre></div><p>生成的字节码如下：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DBD7CAEE\">add.u32 r1</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> r1</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #4C9A91\">42</span><span style=\"color: #666666\">;</span></span></code></pre></div><p>8位宽的PTX寄存器并没有分配约束字母。PTX指令类型接受8位宽的类型是通过从更宽的指令类型转换而来的。示例如下：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DBD7CAEE\">__device__ </span><span style=\"color: #CB7676\">void</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #80A665\">copy_u8</span><span style=\"color: #666666\">(</span><span style=\"color: #CB7676\">char*</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #BD976A\">in</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #CB7676\">char*</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #BD976A\">out</span><span style=\"color: #666666\">)</span></span>\n<span class=\"line\"><span style=\"color: #666666\">{</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">    </span><span style=\"color: #CB7676\">int</span><span style=\"color: #DBD7CAEE\"> d</span><span style=\"color: #666666\">;</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">    </span><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">ld.u8 %0, [%1];</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">d</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">l</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">in</span><span style=\"color: #666666\">));</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">    </span><span style=\"color: #CB7676\">*</span><span style=\"color: #DBD7CAEE\">out </span><span style=\"color: #666666\">=</span><span style=\"color: #DBD7CAEE\"> d</span><span style=\"color: #666666\">;</span></span>\n<span class=\"line\"><span style=\"color: #666666\">}</span></span></code></pre></div><p>上述代码生成的字节码如下：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DBD7CAEE\">ld.u8 r1</span><span style=\"color: #666666\">,</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">[</span><span style=\"color: #DBD7CAEE\">rd1</span><span style=\"color: #666666\">];</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">st.u8 </span><span style=\"color: #666666\">[</span><span style=\"color: #DBD7CAEE\">rd2</span><span style=\"color: #666666\">],</span><span style=\"color: #DBD7CAEE\"> r1</span><span style=\"color: #666666\">;</span></span></code></pre></div><p>使用不是上面指定的约束字符串之一的约束字符串的行为是未定义的。</p>\n<h1 id=\"陷阱\"><a href=\"#陷阱\" class=\"headerlink\" title=\"陷阱\"></a>陷阱</h1><p>尽管<code>asm()</code>语句可用性非常高，但你依然可能会遇到一些问题。</p>\n<h2 id=\"命名空间冲突\"><a href=\"#命名空间冲突\" class=\"headerlink\" title=\"命名空间冲突\"></a>命名空间冲突</h2><p>在之前定义的<code>cube</code>函数中，如果将函数内联将可能出现对临时寄存器<code>t1</code>重复声明的错误。要避免这个错误可以：</p>\n<ul>\n<li>不要将<code>cube</code>函数内联</li>\n<li>将 t1 使用嵌套在 {} 内，以便每次调用都有单独的作用域，例如：</li>\n</ul>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DBD7CAEE\">        __device__ </span><span style=\"color: #CB7676\">int</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #80A665\">cube</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">(</span><span style=\"color: #CB7676\">int</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #BD976A\">x</span><span style=\"color: #666666\">)</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">        </span><span style=\"color: #666666\">{</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">            </span><span style=\"color: #CB7676\">int</span><span style=\"color: #DBD7CAEE\"> y</span><span style=\"color: #666666\">;</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">            </span><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">                </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">{</span><span style=\"color: #C99076\">\\n\\t</span><span style=\"color: #C98A7D99\">\"</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">                </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">   reg .u32 t1;</span><span style=\"color: #C99076\">\\n\\t</span><span style=\"color: #C98A7D99\">\"</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">                </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">   mul.lo.u32 t1, %1, %1;</span><span style=\"color: #C99076\">\\n\\t</span><span style=\"color: #C98A7D99\">\"</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">                </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">mul.lo.u32 %0, t1, %1;</span><span style=\"color: #C99076\">\\n\\t</span><span style=\"color: #C98A7D99\">\"</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">                </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">y</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">x</span><span style=\"color: #666666\">)</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">            </span><span style=\"color: #666666\">);</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">            </span><span style=\"color: #4D9375\">return</span><span style=\"color: #DBD7CAEE\"> y</span><span style=\"color: #666666\">;</span></span>\n<span class=\"line\"><span style=\"color: #DBD7CAEE\">        </span><span style=\"color: #666666\">}</span></span></code></pre></div><p>也可以把<code>asm()</code>内的本地标识符直接使用大括号包裹起来。</p>\n<h2 id=\"内存空间冲突\"><a href=\"#内存空间冲突\" class=\"headerlink\" title=\"内存空间冲突\"></a>内存空间冲突</h2><p><code>asm()</code>语句是无法知道寄存器是在什么样的内存空间中的，用户必须保证使用的PTX指令正确。对于<code>sm_20</code>以及更高的版本，任何传递给<code>asm()</code>语句的指针参数会被作为一个统一虚拟地址空间的地址传递。</p>\n<h2 id=\"错误的优化\"><a href=\"#错误的优化\" class=\"headerlink\" title=\"错误的优化\"></a>错误的优化</h2><p>编译器会默认<code>asm()</code>语句不会对程序产生除了改变了输出操作数以外的任何副作用。为了确保汇编代码在生成PTX的过程中不会被删除或者移动，程序员需要使用<code>volatile</code>关键字。例如：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #CB7676\">volatile</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">mov.u32 %0, %%clock;</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">x</span><span style=\"color: #666666\">));</span></span></code></pre></div><p>通常任何需要写入的内存都会被定义为一个输出操作数，但是如果操作对于用户内存有一些隐藏的副作用的话（比如说通过一个操作数间接访问内存的某一位置），或者如果你想停用所有在<code>asm()</code>语句周围的内存优化，那就可以在第三个冒号后添加一个<code>memory</code>来解除这一约束。例如：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #CB7676\">volatile</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">mov.u32 %0, %%clock;</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">x</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">::</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">memory</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">);</span></span>\n<span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">st.u32 [%0], %1;</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">::</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">l</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">p</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\">, </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">x</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">memory</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">);</span></span></code></pre></div><h2 id=\"错误的PTX\"><a href=\"#错误的PTX\" class=\"headerlink\" title=\"错误的PTX\"></a>错误的PTX</h2><p>编译器前端并不会将<code>asm()</code>语句的模板字符串进行解析，并且不会知道其中的语句是什么意思以及它是否是合法的PTX语句。所以如果字符串中存在错误，在<code>ptxas</code>之前都将无法被感知。比如说，如果你通过<code>r</code>约束传递一个值但是在<code>add.f64</code>指令中使用了这个值，那在ptxas中你将得到一个解析错误。同样，操作数修饰符也是不支持的。例如如下语句：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">mov.u32 %0, %n1;</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">n</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #4C9A91\">1</span><span style=\"color: #666666\">));</span></span></code></pre></div><p>在<code>%n1</code>中的这个<code>n</code>标识符是不支持的，但也会被传入<code>ptxas</code>，这可能会导致未定义行为。</p>\n<h1 id=\"错误检查\"><a href=\"#错误检查\" class=\"headerlink\" title=\"错误检查\"></a>错误检查</h1><p>下面是一些在编译器中可用的内联PTX汇编错误检查技巧。</p>\n<h4 id=\"在一个汇编操作符中使用多个约束字母是不被允许的，比如：\"><a href=\"#在一个汇编操作符中使用多个约束字母是不被允许的，比如：\" class=\"headerlink\" title=\"在一个汇编操作符中使用多个约束字母是不被允许的，比如：\"></a>在一个汇编操作符中使用多个约束字母是不被允许的，比如：</h4><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">add.s32 %0, %1, %2;</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">i</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">rf</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">j</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\">, </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">k</span><span style=\"color: #666666\">));</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>error: an asm operand may specify only one constraint letter in a <code>__device__</code> / <code>__ global__</code> function</p></blockquote>\n<h4 id=\"只有标量变量是可以用在asm的操作数中的。聚合型变量比如结构体类型是不被允许的。比如：\"><a href=\"#只有标量变量是可以用在asm的操作数中的。聚合型变量比如结构体类型是不被允许的。比如：\" class=\"headerlink\" title=\"只有标量变量是可以用在asm的操作数中的。聚合型变量比如结构体类型是不被允许的。比如：\"></a>只有标量变量是可以用在asm的操作数中的。聚合型变量比如结构体类型是不被允许的。比如：</h4><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DBD7CAEE\">int4 i4</span><span style=\"color: #666666\">;</span></span>\n<span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">add.s32 %0, %1, %2;</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">i4</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">j</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\">, </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">k</span><span style=\"color: #666666\">));</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>error: an asm operand must have scalar type</p></blockquote>\n<h4 id=\"PTX-asm-约束隐含的类型和大小必须与关联操作数的类型和大小匹配。比如：\"><a href=\"#PTX-asm-约束隐含的类型和大小必须与关联操作数的类型和大小匹配。比如：\" class=\"headerlink\" title=\"PTX asm 约束隐含的类型和大小必须与关联操作数的类型和大小匹配。比如：\"></a>PTX asm 约束隐含的类型和大小必须与关联操作数的类型和大小匹配。比如：</h4><p>对于<code>char</code>类型的变量<code>ci</code>：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">add.s32 %0, %1, %2;</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">ci</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">j</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\">, </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">k</span><span style=\"color: #666666\">));</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>error: asm operand type size(1) does not match type/size implied by constraint ‘r’</p></blockquote>\n<p>要让<code>char</code>类型的变量<code>ci</code>、<code>cj</code>和<code>ck</code>在上述语句中可用，代码应该改写成如下形式：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">int</span><span style=\"color: #DBD7CAEE\"> temp </span><span style=\"color: #666666\">=</span><span style=\"color: #DBD7CAEE\"> ci</span><span style=\"color: #666666\">;</span></span>\n<span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">add.s32 %0, %1, %2;</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">temp</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">((</span><span style=\"color: #CB7676\">int</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\">cj</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\">, </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">((</span><span style=\"color: #CB7676\">int</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\">ck</span><span style=\"color: #666666\">));</span></span></code></pre></div><p>另一个类型不匹配的示例是：<br>对于<code>float</code>类型的变量<code>fi</code>，</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki vitesse-dark\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #CB7676\">asm</span><span style=\"color: #666666\">(</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">add.s32 %0, %1, %2;</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">=r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">fi</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #666666\">:</span><span style=\"color: #DBD7CAEE\"> </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">j</span><span style=\"color: #666666\">)</span><span style=\"color: #DBD7CAEE\">, </span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #C98A7D\">r</span><span style=\"color: #C98A7D99\">\"</span><span style=\"color: #666666\">(</span><span style=\"color: #DBD7CAEE\">k</span><span style=\"color: #666666\">));</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>error: asm operand type size(4) does not match type/size implied by constraint ‘r’</p></blockquote>\n","text":" CUDA编程环境提供了一个并行线程执行指令集(PTX)用于使用GPU的数据并行计算能力。本指南用于将PTX汇编语句集成进CUDA C程序中。 ASM语句使用a...","permalink":"/post/PTX编程","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"GPU","slug":"GPU","count":1,"path":"api/tags/GPU.json"},{"name":"CUDA","slug":"CUDA","count":1,"path":"api/tags/CUDA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ASM%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">ASM语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">约束</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%99%B7%E9%98%B1\"><span class=\"toc-text\">陷阱</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%86%B2%E7%AA%81\"><span class=\"toc-text\">命名空间冲突</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%86%B2%E7%AA%81\"><span class=\"toc-text\">内存空间冲突</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">错误的优化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E7%9A%84PTX\"><span class=\"toc-text\">错误的PTX</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">错误检查</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E4%B8%80%E4%B8%AA%E6%B1%87%E7%BC%96%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E7%BA%A6%E6%9D%9F%E5%AD%97%E6%AF%8D%E6%98%AF%E4%B8%8D%E8%A2%AB%E5%85%81%E8%AE%B8%E7%9A%84%EF%BC%8C%E6%AF%94%E5%A6%82%EF%BC%9A\"><span class=\"toc-text\">在一个汇编操作符中使用多个约束字母是不被允许的，比如：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%AA%E6%9C%89%E6%A0%87%E9%87%8F%E5%8F%98%E9%87%8F%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%94%A8%E5%9C%A8asm%E7%9A%84%E6%93%8D%E4%BD%9C%E6%95%B0%E4%B8%AD%E7%9A%84%E3%80%82%E8%81%9A%E5%90%88%E5%9E%8B%E5%8F%98%E9%87%8F%E6%AF%94%E5%A6%82%E7%BB%93%E6%9E%84%E4%BD%93%E7%B1%BB%E5%9E%8B%E6%98%AF%E4%B8%8D%E8%A2%AB%E5%85%81%E8%AE%B8%E7%9A%84%E3%80%82%E6%AF%94%E5%A6%82%EF%BC%9A\"><span class=\"toc-text\">只有标量变量是可以用在asm的操作数中的。聚合型变量比如结构体类型是不被允许的。比如：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#PTX-asm-%E7%BA%A6%E6%9D%9F%E9%9A%90%E5%90%AB%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%A4%A7%E5%B0%8F%E5%BF%85%E9%A1%BB%E4%B8%8E%E5%85%B3%E8%81%94%E6%93%8D%E4%BD%9C%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%A4%A7%E5%B0%8F%E5%8C%B9%E9%85%8D%E3%80%82%E6%AF%94%E5%A6%82%EF%BC%9A\"><span class=\"toc-text\">PTX asm 约束隐含的类型和大小必须与关联操作数的类型和大小匹配。比如：</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"ClaRn","slug":"blog-author","avatar":"/gallery/avatar.jpg","link":"/","description":"当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素","socials":{"github":"https://github.com/iYIYiYIYi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"SVM 的求解","uid":"926471e4eff9b83304d4f06ae8b35be9","slug":"SVM 的求解","date":"2023-12-03T05:50:42.000Z","updated":"2023-12-06T14:47:50.758Z","comments":true,"path":"api/articles/SVM 的求解.json","keywords":"记录, 学习, ClaRnS","cover":"/gallery/ml.png","text":" TIP 给定下列3个样本点，请计算硬间隔SVM分类器 3 1 1 1 -1 -1 首先，我们需要定义SVM的目标函数和约束条件。我们假设SVM的分类决策函数是...","permalink":"/post/SVM 的求解","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"基础","slug":"基础","count":35,"path":"api/categories/基础.json"},{"name":"机器学习","slug":"基础/机器学习","count":7,"path":"api/categories/基础/机器学习.json"}],"tags":[{"name":"模式识别","slug":"模式识别","count":7,"path":"api/tags/模式识别.json"},{"name":"机器学习","slug":"机器学习","count":8,"path":"api/tags/机器学习.json"}],"author":{"name":"ClaRn","slug":"blog-author","avatar":"/gallery/avatar.jpg","link":"/","description":"当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素","socials":{"github":"https://github.com/iYIYiYIYi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"《诸神的黄昏 1944—1945，从莱特湾战役到日本投降》读书报告","uid":"e8b1d5b0c00361d7420940b31baf6a00","slug":"《诸神的黄昏》读书报告","date":"2023-11-28T05:18:16.000Z","updated":"2023-12-09T06:34:22.771Z","comments":true,"path":"api/articles/《诸神的黄昏》读书报告.json","keywords":"记录, 学习, ClaRnS","cover":"/gallery/cover9.jpg","text":"太平洋上的终章——《诸神的黄昏 1944—1945，从莱特湾战役到日本投降》读书报告引言 关于太平洋战争大战略的基本问题仍然悬而未决。麦克阿瑟是否应当获准收复整...","permalink":"/post/《诸神的黄昏》读书报告","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"读书笔记","slug":"读书笔记","count":1,"path":"api/tags/读书笔记.json"}],"author":{"name":"ClaRn","slug":"blog-author","avatar":"/gallery/avatar.jpg","link":"/","description":"当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素","socials":{"github":"https://github.com/iYIYiYIYi","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}