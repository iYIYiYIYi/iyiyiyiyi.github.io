{"title":"进程同步经典问题","uid":"e14beeee054107e61818821b5c2d1c74","slug":"进程同步经典问题","date":"2023-03-25T13:53:16.000Z","updated":"2023-09-19T15:08:35.420Z","comments":true,"path":"api/articles/进程同步经典问题.json","keywords":"记录, 学习, ClaRnS","cover":null,"content":"<h2 id=\"信号量\"><a class=\"markdownIt-Anchor\" href=\"#信号量\"></a> 信号量</h2>\n<p>信号量机制是一种用于解决互斥和同步问题的机制，包括两个原语<code>wait(S)</code>和<code>signal(S)</code>，也可以记为<code>P操作</code>和<code>V操作</code>。</p>\n<h2 id=\"管程\"><a class=\"markdownIt-Anchor\" href=\"#管程\"></a> 管程</h2>\n<p>使用一个数据结构S来描述共享资源数，并包含对该数据结构的一组操作。</p>\n<h2 id=\"生产者-消费者问题\"><a class=\"markdownIt-Anchor\" href=\"#生产者-消费者问题\"></a> 生产者-消费者问题</h2>\n<pre class=\"highlight\"><code class=\"cpp\">semaphore mutex = <span class=\"hljs-number\">1</span>;\nsemaphore empty = n;\nsemaphore full = <span class=\"hljs-number\">0</span>;\nproducer () &#123;\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>) &#123;\n        <span class=\"hljs-comment\">// ...produce data</span>\n        P(empty);\n        P(mutex);\n        <span class=\"hljs-comment\">// ...add data to buffer</span>\n        V(mutex);\n        V(full);\n    &#125;\n&#125;\n\nconsumer() &#123;\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>) &#123;\n        P(full);\n        P(mutex);\n        <span class=\"hljs-comment\">// ...get data from buffer</span>\n        V(mutex);\n        V(empty);\n        <span class=\"hljs-comment\">// ...consume data</span>\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"读者-写者问题\"><a class=\"markdownIt-Anchor\" href=\"#读者-写者问题\"></a> 读者-写者问题</h2>\n<pre class=\"highlight\"><code class=\"cpp\"><span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 读者数量</span>\nsemaphore mutex=<span class=\"hljs-number\">1</span>;\nsemaphore rw=<span class=\"hljs-number\">1</span>;\nsemaphore w=<span class=\"hljs-number\">1</span>; \n<span class=\"hljs-comment\">// w是用来保证写优先的</span>\n<span class=\"hljs-comment\">// 如果没有将会导师读优先，写进程会存在“饿死”现象 </span>\n\nwriter() &#123;\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>) &#123;\n        P(w);\n        P(rw);\n        <span class=\"hljs-comment\">// ...writing</span>\n        V(rw);\n        V(w);\n    &#125;\n&#125;\n\nreader() &#123;\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>) &#123;\n        P(w);\n        P(mutex);\n        <span class=\"hljs-keyword\">if</span> (count == <span class=\"hljs-number\">0</span>)\n            P(rw);\n        count ++;\n        V(mutex);\n        V(w);\n        <span class=\"hljs-comment\">// ...reading</span>\n        P(mutex);\n        count --;\n        <span class=\"hljs-keyword\">if</span> (count == <span class=\"hljs-number\">0</span>)\n            V(rw);\n        V(mutex);\n    &#125;\n&#125;\n</code></pre>\n","text":" 信号量 信号量机制是一种用于解决互斥和同步问题的机制，包括两个原语wait(S)和signal(S)，也可以记为P操作和V操作。 管程 使用一个数据结构S来描...","permalink":"/post/进程同步经典问题","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"},{"name":"Review","slug":"Review","count":7,"path":"api/tags/Review.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%A1%E5%8F%B7%E9%87%8F\"><span class=\"toc-text\"> 信号量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E7%A8%8B\"><span class=\"toc-text\"> 管程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98\"><span class=\"toc-text\"> 生产者-消费者问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E8%80%85-%E5%86%99%E8%80%85%E9%97%AE%E9%A2%98\"><span class=\"toc-text\"> 读者-写者问题</span></a></li></ol>","author":{"name":"ClaRn","slug":"blog-author","avatar":"/gallery/avatar.jpg","link":"/","description":"当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"图像特征","uid":"ffa3c8772fdf3309434ff546ef79c450","slug":"图像特征","date":"2023-04-02T13:09:32.000Z","updated":"2023-09-19T15:08:35.420Z","comments":true,"path":"api/articles/图像特征.json","keywords":"记录, 学习, ClaRnS","cover":null,"text":" SIFT、HOG特征 SIFT特征 Scale Invariant Feature Transform ，又称尺度不变特征变换。SIFT特征对旋转、尺度缩放、...","permalink":"/post/图像特征","photos":[],"count_time":{"symbolsCount":416,"symbolsTime":"1 mins."},"categories":[{"name":"图形图像","slug":"图形图像","count":1,"path":"api/categories/图形图像.json"}],"tags":[{"name":"图像处理","slug":"图像处理","count":1,"path":"api/tags/图像处理.json"},{"name":"OpenCV","slug":"OpenCV","count":1,"path":"api/tags/OpenCV.json"}],"author":{"name":"ClaRn","slug":"blog-author","avatar":"/gallery/avatar.jpg","link":"/","description":"当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"软件工程中的开发模型","uid":"cfd4ec52764f9243a80a5ef9b48d3349","slug":"软件工程","date":"2023-03-23T16:41:13.000Z","updated":"2023-09-19T15:08:35.420Z","comments":true,"path":"api/articles/软件工程.json","keywords":"记录, 学习, ClaRnS","cover":null,"text":" 软件开发生命周期（software development lifecycle (SDLC) ） 软件的产生直到报废的生命周期，包括：问题定义、可行性分析、需...","permalink":"/post/软件工程","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"基础","slug":"基础","count":7,"path":"api/categories/基础.json"}],"tags":[{"name":"Review","slug":"Review","count":7,"path":"api/tags/Review.json"},{"name":"软件工程","slug":"软件工程","count":1,"path":"api/tags/软件工程.json"}],"author":{"name":"ClaRn","slug":"blog-author","avatar":"/gallery/avatar.jpg","link":"/","description":"当你在浪费时间的事情里获得了快乐，那就不是在浪费时间。 ——罗素","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}